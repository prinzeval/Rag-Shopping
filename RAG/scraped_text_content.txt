Content from https://developers.facebook.com/docs/marketing-api/catalog/localized-catalog-ig:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Localized Catalog for Instagram Product Tagging
Overview
Use this guide to set up your localized catalog for Product Tagging with multiple languages and countries.
Your
catalog
is an object (or container) of information about your products where you upload your inventory.
How it Works
Meta provides localized catalog functionality, enabling you to set up your product catalog to show items in ads or shops for items in different countries. Localizing the currency, the price, and the translated name or description are common cases. You can also give a localized product URL to navigate the customer to your country or language-specific product website.
By adding localization information to your catalog, you can serve localized product information to the users based on their country or language; for example:
From a single Instagram post — show English/USD to people in the U.S. and Italian/EUR to people in Italy.  See example below.
Only show Instagram shopping tags in countries for which your catalog has pricing information.
Set Up Your Localized Catalog
To set up your localized catalog for Instagram Shopping, we recommend to read:
Localized Catalog Setup
Localized Catalog for Advantage+ Catalog Ads
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Start Creating Instagram Shopping Posts
Before You Start
Work with your Instagram contact to confirm you have read our policy and accepted the Terms of Service (the standard agreement).
Select a product catalog to use for your Instagram Shopping posts.
Add Product Tags
in Instagram posts or stories, and share!
Preview localized product information in Commerce Manager; see
Set Up a Catalog for Multiple Languages and Countries
.
Locate your catalog by name and switch catalogs, if needed. In the Instagram app, tap
Settings
>
Shopping
.
What You Can Expect
When you add products on Instagram, you can see the product information in your own country or language. Once the post is shared with your audience, they can view product information in their own country or language as you specified in your catalog setup. Language is determined by their phone or app language settings and their country is based on location.
Who will see my Instagram Shopping tags?
If you have uploaded a country feed to your catalog or set your catalog’s default country, via the
Settings
page in Commerce Manager, then your tags are only visible to people in the countries for which you have prices in your catalog.
For example, if you:
Choose US as the default country for your catalog
Upload USD prices in your main feed
Upload GBP prices in your UK override feed
Then:
People in the US will see your tags with USD prices.
People in the UK will see your tags with GBP prices.
People in other countries will see your tags with USD prices.
Any items in your main feed are globally visible unless they have a corresponding override for a specific country.
Note that if you upload items in your main feed in multiple currencies, your items may appear in your tagged post in mixed currencies when globally visible.
Best Practices
Make sure that product images satisfy catalog
requirements
.
Make sure that product titles satisfy catalog
requirements
.
Make sure that product descriptions satisfy catalog
requirements
.
Learn More
For full details, see
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Add Product Tags in Instagram Posts
Localized Catalog Setup
Localized Catalog for Advantage+ Catalog Ads
Create a Advantage+ Catalog Ad for Multiple Languages and Countries, Ads Help Center
Build a Creative Template
Product Catalog, Marketing API
Scheduled Feeds, Catalog
Supported Fields for Advantage+ Catalog Ads
Advantage+ Catalog Ads - Create Ads

Content from https://developers.facebook.com/docs/marketing-api/catalog/product-deep-links:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Product Deep Links
Provide deep links in your feed following the
App Links
specification. Deep link information in your feed takes precedence over any information Facebook collects with App Links metadata with our web crawler.
If you already have deep link information from App Links, you don't need to specify this data. Facebook uses information from App Links to display the correct deep link. To display deep links in your ads, see
Advantage+ Catalog Ads, Ad Template
.
For iOS, only provide iPhone
or
iPad app information if they are different from the general iOS app.
Use a
product group
to group all
product variants
. A product group identifies products that are almost identical but have variations such as color, material, size or pattern. Product groups make it easier to advertise additional colors, styles, or patterns for a particular product. All products in a product group share the same
item_group_id
. In Advantage+ catalog ads, we pick only one item out of the group based on the signal we received from the pixel or app.
For the suggested formats for scheduling data feeds, see the
CSV and TSV sample files
on the catalog reference page.
Name
Description
Required
applink.android_app_name
The name of the Android app for display.  For example,
Electronic Android
.
No
applink.android_package
The fully-qualified package name for intent generation.  For example,
com.electronic
.
No
applink.android_url
The
custom URL scheme
or
Android App Link
for your Android app.  For example,
android://electronic
or
https://www.example.com/path/to/component/android
.
No
applink.ios_app_name
The name of the iOS app for display.  For example,
Electronic iOS
.
No
applink.ios_app_store_id
The iOS App ID for the App Store.  For example,
1234
.
No
applink.ios_url
The
custom URL scheme
or
Universal Link
for your iOS app.  For example,
ios://electronic
or
https://www.example.com/path/to/component/ios
.
No
applink.ipad_app_name
The name of the iPad app for display.  For example,
Electronic iPad
.
No
applink.ipad_app_store_id
The iPad App ID for the App Store.  For example,
9010
.
No
applink.ipad_url
The
custom URL scheme
or
Universal Link
for your iPad app.  For example,
ipad://electronic
or
https://www.example.com/path/to/component/ipad
.
No
applink.iphone_app_name
The name of the iPhone app for display.  For example,
Electronic iPhone
.
No
applink.iphone_app_store_id
The iPhone App ID for the App Store.  For example,
5678
.
No
applink.iphone_url
The
custom URL scheme
or
Universal Link
for your iPhone app.  For example,
iphone://electronic
or
https://www.example.com/path/to/component/iphone
.
No
applink.windows_phone_app_name
The name of the Windows app for display.  For example,
Electronic Windows
.
No
applink.windows_phone_app_id
The Windows App ID for the app store, as a GUID.  For example,
ee728e01-7727-4168-9c8f-85c7eef40112
.
No
applink.windows_phone_url
The custom URL scheme for your Windows Phone app.  For example,
windows://electronic
.
No

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/metadata-tags:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Metadata Tags
You can optionally set metadata tags in your product feed files. This enables Facebook to attribute catalogs using this feed to your app. Once a catalog is attributed to your app, the meta tag is not required in subsequent feed uploads to that catalog.
Include the following elements as space-delimited comments at the top of TSV/CSV feeds or inside a
metadata
tag in your XML feeds:
ref_application_id
— Your Facebook app ID
ref_asset_id
- ID that uniquely identifies this feed in your system
Feed Formats
Feed Format
Description
CSV
Sample CSV Feed file with reference information inside the metadata tag.
Download (Right-Click > Save Link As)
TSV
Sample TSV Feed file with reference information inside the metadata tag.
Download (Right-Click > Save Link As)
RSS XML
Sample RSS XML Feed file with reference information inside the metadata tag.
Download (Right-Click > Save Link As)
ATOM XML
Sample Atom XML Feed file with reference information inside the metadata tag.
Download (Right-Click > Save Link As)
Example - TSV Feed Format
# ref_application_id <YOUR_APP_ID>
# ref_asset_id <YOUR_ASSET_ID>
id  title  ios_url  ios_app_store_id  ios_app_name  android_url  android_package  android_app_name  windows_phone_url  windows_phone_app_id  windows_phone_app_name  description  google_product_category  product_type  link  image_link  condition  availability  price  sale_price  sale_price_effective_date  gtin  brand  mpn  item_group_id  gender  age_group  color  size  shipping  custom_label_0
DB_1  Dog Bowl In Blue  example-ios://electronic/db_1  123  Electronic Example iOS  example-android://electronic/db_1  com.electronic.example  Electronic Example Android  example-windows://electronic/db_1  64ec0d1b-5b3b-4c77-a86b-5e12d465edc0  Electronic Example Windows  Solid plastic Dog Bowl in marine blue color  Animals > Pet Supplies  Bowls & Dining > Food & Water Bowls  http://www.example.com/bowls/db-1.html  https://www.facebook.com/images/product_image_template.png?id=1  new  in stock  9.99 GBP        Example    DB_GROUP_1          UK::Standard:9.95 GBP  "Made in Waterford, IE"
...
Example - RSS XML Feed Format
...
<?xml version="1.0"?>
<rss xmlns:g="http://base.google.com/ns/1.0" version="2.0">
  <channel>
    <metadata>
      <ref_application_id><YOUR_APP_ID></ref_application_id>
      <ref_asset_id><YOUR_ASSET_ID></ref_asset_id>
    </metadata>
  </channel>
</rss>
...
Example - ATOM XML Feed Format
...
<?xml version="1.0"?>
<rss xmlns:g="http://base.google.com/ns/1.0" version="2.0">
  <feed>
    <metadata>
      <ref_application_id><YOUR_APP_ID></ref_application_id>
      <ref_asset_id><YOUR_ASSET_ID></ref_asset_id>
    </metadata>
  </feed>
</rss>
...

Content from https://developers.facebook.com/docs/marketing-api/catalog/reference:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Reference - Catalog
Supported Feed Formats
Inventory should be uploaded to Facebook using a catalog. For each catalog, a product feed should be provided in one of the supported formats: CSV, TSV, RSS XML, ATOM XML, or
Google Sheets (see Help Center article for further guidance)
.
Format
Description
CSV
Comma-separated value. 
Works with most spreadsheet programs. The first row specifies the column header. Subsequent rows supply the corresponding values for each route.
Fields containing whitespace or commas should be enclosed in "double quotes". A double quote inside a double-quoted field must be escaped with two consecutive double quotes.
Example:
"Join our ""Royal"" membership program"
.
Nested or multi-value fields, such as image, can be represented using JSON-encoded values or by a set of "flattened" plain-text columns labeled using JSON-path syntax.
Example:
image[0].url
,
image[0].tag[0]
,
image[0].tag[1])
Both conventions can be used interchangeably in the same file.
See examples for
CSV feed for Advantage+ catalog ads
and
CSV feed for commerce
.
Download (Right-click > Save Link As)
You can reference our CSV (.csv) example files as you're creating your feed, but we recommend using Commerce Manager as your primary source
.
TSV
Tab-separated value. Works with most spreadsheet programs. See guidelines for
CSV
.
Download (Right-click > Save Link As
)
RSS XML
Rich-Site Summary, Extensible Markup Language. A root XML node encloses a set of nodes, each of which represents a route. The file must begin with the
declaration
tag. The format is typically generated by automated feed provider systems or web servers. A set of item XML nodes represents a product list and must begin with the
<?xml
declaration tag.
Typically generated by automated feed provider systems or web servers.
Download (Right-click > Save Link As)
If you receive an error, it means that a line in your XML data feed file is too long and exceeds our size limit of 5,242,880 bytes or characters. Please reformat your XML into multiple lines with 1 field per line and upload your file again. For more information, see
Troubleshoot Data Feed Errors
.
Atom XML
The Atom Syndication Format is an XML language used for web feeds, while the Atom Publishing Protocol (AtomPub or APP) is a simple HTTP-based protocol for creating and updating web resources. The format is typically generated by automated feed provider systems or web servers. A set of item XML nodes represents a product list and must begin with the
<?xml
declaration tag.
Typically generated by automated feed provider systems or web servers. See
example XML Feed (Atom) for commerce
.
Download (Right-click > Save Link As)
Google Sheets
Commerce Manager also now supports Google Sheets for scheduled feeds:
Create your data feed as a spreadsheet in Google Sheets and get the shareable link.
When you add products in Commerce Manager, select the Google Sheets option. Copy and paste in your shareable link and finish your upload.
Continue managing your inventory in the Google spreadsheet in future and we'll fetch from it at scheduled times.
Learn More
How to Create a Data Feed for Your Catalog Using a Template, Help Center
Data Feed Specifications for Catalogs, Help Center
Example Feeds
Example CSV Feed — Advantage+ Catalog Ads
id,title,description,availability,condition,price,link,image_link,brand,additional_image_link,age_group,color,gender,item_group_id,google_product_category,pattern,product_type,sale_price,sale_price_effective_date,size,FB_product_1234,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,in stock,new,9.99 USD,https://www.facebook.com/facebook_t_shirt,https://www.facebook.com/t_shirt_image_001.jpg,Facebook,https://www.facebook.com/t_shirt_image_002.jpg,adult,blue,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts,stripes1,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,small,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300
Example CSV Feed — Commerce
id,title,description,rich_text_description,availability,condition,price,link,image_link,brand,additional_image_link,age_group,color,gender,item_group_id,google_product_category,product_type,sale_price,sale_price_effective_date,size,status,inventory
FB_product_1234,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,blue,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,small,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
FB_product_1235,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,blue,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,medium,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
FB_product_1236,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,blue,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,large,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
FB_product_1237,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,black,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,small,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
FB_product_1238,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,black,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,medium,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
FB_product_1239,Facebook T-Shirt (Unisex),A vibrant crewneck for all shapes and sizes. Made from 100% cotton.,"<p>A vibrant crewneck for all shapes and sizes. Made from 100% cotton.</p> <p> Made of 52% combed and ringspun cotton, 48% polyester.</p>",in stock,new,9.99 USD,https://www.facebookswagstore.com/American-Apparel-T-Shirt-P395.aspx,https://www.facebookswagstore.com/GetImage.ashx?Path=%7e%2fAssets%2fFB00-0967-Group_Full.jpg&maintainAspectRatio=true&maxHeight=400&maxWidth=400,Facebook,https://www.facebookswagstore.com/Assets/ProductImages/FB00-0475.jpg,adult,black,unisex,FB1234_shirts,Apparel & Accessories > Clothing > Shirts & Tops,Apparel & Accessories > Clothing > Shirts,4.99 USD,2017-12-01T0:00-23:59/2017-12-31T0:00-23:59,large,2.99 USD,2018-11-01T12:00-0300/2018-12-01T00:00-0300,published,200
Example XML Feed (Atom) — Commerce
The prefix "g" is required for attributes in Google Merchant Center namespace :
xmlns:g="http://base.google.com/ns/1.0"
. 
For other attributes not mentioned
here
, use it without prefix, such as
video
,
additional_image_link
, etc.
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:g="http://base.google.com/ns/1.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel> 
    <title>My Deal Shop Products</title>
    <description>Product Feed for Facebook</description> 
    <link>https://www.mydealsshop.foo</link>
    <atom:link href="https://www.mydealsshop.foo/pages/test-feed" rel="self" type="application/rss+xml" />
    
     
        <item>
            <g:item_group_id>SKU-123123</g:item_group_id>
            <g:gtin>12345678912345</g:gtin>
            <g:google_product_category>Toys &amp; Games > Toys > Executive Toys > Magnet Toys</g:google_product_category>            
            <g:id>SKU-123123-RED</g:id>
            <g:title>WidgetThing</g:title>            
            <g:description>This product is the product you need to do the thing</g:description>
            <g:link>https://www.mydealsshop.foo/products/widgetthing</g:link>
            <g:image_link>https://cdn.mycdn.foo/files/123123123.jpg</g:image_link>  
            
            <additional_image_link>https://cdn.mycdn.foo/files/123123123_image2.jpg</additional_image_link>            
            <additional_image_link>https://cdn.mycdn.foo/files/123123123_image3.jpg</additional_image_link>
                        
            <color>Red</color>           
                    
            <additional_variant_attribute>
                <label>Style</label>
                <value>Cool</value>
            </additional_variant_attribute>
                    
            <g:brand>AcmeCo</g:brand>
            <g:condition>New</g:condition>  
          
            <g:availability>in stock</g:availability>
            
            <g:price>19.99 USD</g:price>
            <g:sale_price>9.99 USD</g:sale_price>
           
        </item>  

        <item>
            <g:item_group_id>SKU-123123</g:item_group_id>
            <g:gtin>12345678912346</g:gtin>
            <g:google_product_category>Toys &amp; Games > Toys > Executive Toys > Magnet Toys</g:google_product_category>            
            <g:id>SKU-123123-GREEN</g:id>
            <g:title>WidgetThing</g:title>            
            <g:description>This product is the product you need to do the thing</g:description>
            <g:link>https://www.mydealsshop.foo/products/widgetthing</g:link>
            <g:image_link>https://cdn.mycdn.foo/files/123123123.jpg</g:image_link>  
            
            <additional_image_link>https://cdn.mycdn.foo/files/123123123_image2.jpg</additional_image_link>            
            <additional_image_link>https://cdn.mycdn.foo/files/123123123_image3.jpg</additional_image_link>
                        
            <color>Green</color>           
                    
            <additional_variant_attribute>
                <label>Style</label>
                <value>Cool</value>
            </additional_variant_attribute>
                    
            <g:brand>AcmeCo</g:brand>
            <g:condition>New</g:condition>  
          
            <g:availability>in stock</g:availability>
            
            <g:price>19.99 USD</g:price>
            <g:sale_price>9.99 USD</g:sale_price>
            
        </item>   
         

    </channel>
</rss>
Feed Format — Schedule Data Feed Fetches
For scheduling data feed fetches, see suggested formats below.
Feed Format
Use Case
Sample Feed
CSV
Update
price
and
availability
for a subset of items.
Download (Right-Click and Save Link As)
TSV
Reset
sale_price
and update
custom_label_0
for a subset of items
Download (Right-Click and Save Link As)
Supported Catalog Fields
Catalog fields are instrumental to the quality of the experience for customers buying products on your Shop on Facebook or Instagram.
Catalog fields are used to populate the
Product Details
page for each item. This includes important information, such as the product description, images, size/color variants, price, and availability. Missing or bad data can negatively affect the user experience, impact conversion to purchases, or could be misleading and erode trust.
Supported Fields for Products
The following table defines the fields used to create a catalog, including the requirement level (required vs. optional).
For best practice column-naming conventions, use U.S. English for all fields
.
Required Fields (for Ads and Commerce)
Additional Required Fields for Checkout on Facebook and Instagram (US Only)
Optional Fields
Additional Required Fields for Selling in India
Required Fields (for Ads and Commerce)
Each field in your data feed represents information about your products. All field names and certain supported values must be in US English. The following fields are required for each product in your catalog.
Note
: If any required fields are missing or formatted incorrectly, products may not upload to your catalog.
Attribute and Type
Description
id
Type: string
Max character limit: 100
A unique content ID for the item. Use the item's SKU if possible. Each content ID must appear only once in your catalog.
If there are multiple instances of the same ID, we ignore all instances.
Note
: For dynamic ads, this ID must exactly match the content ID for the same item in your Meta Pixel.
Example:
12345
This field is required for supplementary feeds. Each item’s content ID must exactly match in the supplementary feed and the main feed it’s linked to. This indicates it’s the same item in both feeds.
title
Type: string
Character limit: 200, but we recommend a maximum of 65 to avoid longer titles being cut off.
A specific, relevant title for the item. See
product title specifications
.
Example:
Blue Cotton T-Shirt
This field is supported by supplementary feeds.
description
type: string
Max character limit: 9999
A relevant description of the item. Include specific and unique product features, such as material or color. Use plain text (not HTML) and don't enter text in all capital letters or include any links. The description should be different than the title. See
product description specifications
.
Example: A comfortable royal blue women's T-shirt in organic cotton. Cap sleeves and relaxed fit. Perfect for warm summer days.
This field is supported by supplementary feeds.
availability
Type: string
The current availability of the item. Must be written in U.S. English. Supported values:
in stock
out of stock
Items that are out of stock display as "sold out" in your shop. They don't display at all in your ads.
Example:
in stock
condition
Type: string
The condition of the item. Supported values:
new
,
refurbished
,
used
.
Example:
new
price
type: string
The price of the item. Format the price as a number, followed by a space and then the 3-letter ISO 4217 currency code
(ISO 4217 standards)
. Always use a period (.) as the decimal point, not a comma (,). Don't include currency symbols such as $, € or £.
To add product information and prices that will display for other countries or languages,
upload a country feed or language feed to your catalog
.
Example:
9.99 USD
,
7.99 EUR
link
Type: string
The URL to the specific product page for the item on your business's website where people can learn more about or buy that exact item. Links must begin with http:// or https://, be valid and be hosted on your business’s website domain. Don't provide a link to a Facebook domain (such as your business's Facebook Page) or somewhere else.
Example:
http://www.jaspersmarket.com/products/shirt
image_link
Type: string
The URL for the main image of your item. Images must be in JPEG or PNG format, at least 500 x 500 pixels and up to 8 MB. See
product image specifications
.
Example:
http://www.jaspersmarket.com/products/shirt.jpg
Note
: If you change the image later, the new image must use a different URL or the change won't be recognized.
This field is supported by supplementary feeds.
brand
Type: string
Max characters: 100
The brand name of the item.
Example:
Jasper's Market
Additional Required Fields for Checkout on Facebook and Instagram (US Only)
Checkout on Facebook and Instagram
(US only) allows customers to complete purchases directly on Facebook and Instagram. To sell items with this checkout method, provide the following additional fields for each product in your catalog. If items are missing these fields, people won't be able to buy them or they may not show in your shop at all.
Attribute and Type
Description
quantity_to_sell_on_facebook
Type: integer
The quantity of this item that you have available to sell on Facebook and Instagram. Enter a whole number. To prevent overselling, the item's quantity will be automatically reduced each time a purchase order is confirmed through checkout.
Note
: To display as in stock for checkout, an item's
quantity_to_sell_on_facebook
must be
1
or higher and its
availability
must also be set to
in stock
.
Example:
150
This field was previously called
inventory
. While we still support the old field name, we recommend that you use the new name.
size
Type: string
Required for items in
specific product categories
including clothing and shoes.
Max character limit: 200
The size of the item. Enter the size as a word, abbreviation or number, such as "Small", "XL", "12" or "One Size".
Example:
Medium
This field is supported by supplementary feeds.
Optional Fields
You can also include many optional fields to share more product information with customers or control how items are displayed.
Attribute and Type
Description
sale_price
Type: string
If the item is on sale, enter its discounted price. Use the same formatting as the
price
field.
Example:
7.99 USD
sale_price_effective_date
Type: two ISO-8601 timestamp
The date, time and time zone when your sale starts and ends. If you don't add this field, any items with a
sale_price
remain on sale until you remove their sale price. Use this format:
YYYY-MM-DDT23:59+00:00/YYYY-MM-DDT23:59+00:00
Enter the sale start date as
YYYY-MM-DD
followed by a "T".
Enter the start time in 24-hour format (00:00 to 23:59) followed by the UTC time zone (-12:00 to +14:00).
Enter a "/". Then, repeat the same format for the date and time when your sale ends.
Example (using PST time zone -08:00):
2020-04-30T09:30-08:00/2020-05-30T23:59-08:00
item_group_id
Type: string
Max character limit: 100
Allows you to set up variants of the same product, such as different sizes, colors or patterns. Enter the same group ID in this field for all variants of the same product to indicate they're part of a group. Learn more about
product variants
.
Example:
Shirt_1
status
Type: string
Controls whether the item is active or archived in your catalog. Only active items can be seen by people in your ads, shops or any other channels. Supported values:
active
,
archived
. Items are active by default. Learn more about
archiving items
.
Example:
active
Note
: Some partner platforms such as Shopify may sync items to your catalog with a status called
staging
, which behaves the same as
archived
.
This field was previously called
visibility
. While we still support the old field name, we recommend that you use the new name.
additional_image_link
Type: string
Maximum character limit: 2000
URLs for up to 20 additional images of your item, separated by a comma (,), semicolon (;), space ( ) or vertical bar (|). Follow the same image specifications as
image_link
.
Since this field takes a string, the entire list of URLs must be formatted with double quotes. For example:
"http://www.jaspersmarket.com/products/shirt2.jpg, http://www.jaspersmarket.com/products/shirt3.jpg"
To display additional images in your ads, see
Dynamic Ads, Ad Template
This field is supported by supplementary feeds.
google_product_category
Type: string
Provide the most specific Google product category possible from this list:
Excel (.xls)
or
Plain text (.txt)
. Enter either the category name (not case sensitive) or its ID number.
Example:
Apparel & Accessories > Clothing > Shirts & Tops
or
212
Learn more about
product categories
(Business Help Center article).
Note
: The category lists above are in US English. You can download other languages from
Google Merchant Help Center
.
This field is supported by supplementary feeds.
fb_product_category
Type: string
Provide the most specific Facebook product category possible from this list:
Spreadsheet (.csv)
or
Plain text (.txt)
. Enter either the category name (not case sensitive) or its ID number.
Example:
Clothing & Accessories > Clothing > Women's Clothing > Tops & T-Shirts
or
430
Learn more about
product categories
(Business Help Center article).
Note
: The category lists above are in US English. You can download other languages
here
.
This field is supported by supplementary feeds.
Category-specific fields
When you provide a Google or Facebook product category (
google_product_category
or
fb_product_category
), we recommend that you add more fields that are specific to that category. This gives people more information to make a purchase decision. For example, for beauty products, you could provide
ingredients
.
View the list of category-specific fields
.
This field is supported by supplementary feeds.
color
Type: string
Max character limit: 200
The main color of the item. Describe the color in words, not a hex code.
Example:
Royal Blue
This field is supported by supplementary feeds.
gender
Type: string
The gender your item is targeted towards. Supported values:
female
,
male
,
unisex
.
Example:
unisex
This field is supported by supplementary feeds.
size
Type: string
Max character limit: 200
The size of the item. Enter the size as a word, abbreviation or number, such as "Small", "XL", "12" or "One Size".
Example:
Medium
This field is supported by supplementary feeds.
age_group
Type: string
The age group the item is targeted towards. Accepted values:
adult
,
all ages
,
teen
,
kids
,
toddler
,
infant
,
newborn
.
Example:
adult
This field is supported by supplementary feeds.
material
Type: string
Character limit: 200
The material the item is made from, such as cotton, polyester, denim or leather.
Example:
Organic Cotton
This field is supported by supplementary feeds.
pattern
Type: string
Max character limit: 100
The pattern or graphic print on the item.
Example:
Flannel
,
Gingham
,
Polka dots
,
stripes
This field is supported by supplementary feeds.
shipping
Type: string
This allows you to use a shipping-related overlay in your ads
.
Shipping details for the item, formatted as:
Country:Region:Service:Price
Enter the country as a 2-letter
ISO 3166 country code
.
Enter the region, state or province. If shipping information is the same for an entire country, you can leave out the region but keep the :: as shown in the Philippines (PH) example below.
Enter a description of the shipping service such as Ground or Air.
Enter the price as a number followed by a space and then the 3-letter
ISO 4217 currency code
.
Note
: To use the "Free Shipping" overlay for ads, enter the price as 0.0.
If you offer different shipping details by region or country, separate them with a comma (,) as shown in the example.
Example:
US:NY:Ground:9.99 USD, PH::Air:300 PHP
shipping_weight
Type: string
Shipping weight of the item in
lb
,
oz
,
g
, or
kg
.
Example:
10 kg
internal_label
Type: string
Add internal labels to help filter items when you create
product sets
. For example, you could add a “summer” label to all items that are part of a summer promotion and then filter those items into a set. Labels are only visible to you
Enclose each label in single quotes (') and separate multiple labels with commas (,). Don’t include white spaces at the beginning or end of a label. Character limit: Up to 5,000 labels per product and 110 characters per label.
Example (TSV, XLSX, Google Sheets): ['summer','trending']
Example (CSV): “['summer','trending']”
Note
: If you’re currently using custom labels (
custom_label_0
to
custom_label_4
) for filtering product sets, switching to internal labels (
internal_label
) instead is recommended. Unlike custom labels, you can add or update internal labels as often as needed without sending items through policy review each time, which can impact ad delivery.
This field was previously called
product_tags
. While we still support the old field name, we recommend that you use the new name.
custom_label_0
custom_label_1
custom_label_2
custom_label_3
custom_label_4
Type: string
Max character limit: 100
Up to five custom fields for any additional information you want to filter items by when you create sets. For example, you could use a custom field to indicate all items that are part of a summer sale, and then filter those items into a set. This field supports any text value, including numbers.
Example:
Summer Sale
This field is supported by supplementary feeds.
custom_number_0
custom_number_1
custom_number_2
custom_number_3
custom_number_4
Type: int
Up to five custom fields for any additional number-related information you want to filter items by when you create sets. This field allows you to filter by number ranges (
is greater than
and
is less than
) when you create a set. For example, you could use this field to indicate the year an item was produced, and then filter a certain year range into a set.
This field supports whole numbers between 0 and 4294967295. It doesn't support negative numbers, decimal numbers or commas, such as -2, 5.5 or 10,000.
Example:
2022
rich_text_description
Type: string
Max characters: 9999
The rich text (HTML) description for item.
Note
: If this field is provided, we use it instead of
description
; however,
the
description
field is still required
because it's a fallback.
Supported tags include:
<form>
,
<fieldset>
,
<div>
,
<span>
,
<section>
All Header tags:
<header>
,
<h1>
thru
<h6>
Table tags:
<table>
,
<tbody>
,
<tfoot>
,
<thead>
,
<td>
,
<th>
,
<tr>
List tags:
<ul>
,
<li>
,
<ol>
,
<dl>
,
<dd>
,
<dt>
Other formatting tags:
<b>
,
<u>
,
<i>
,
<em>
,
<strong>
,
<title>
,
<small>
,
<br>
,
<p>
,
<div>
,
<sub>
,
<sup>
,
<pre>
,
<q>
,
<s>
Note:
Any attributes of the html tags such as
<style>
will be stripped off from the field.
Example:
<html>
<p>Unisex cotton T-shirt with 3/4 length sleeves in royal blue. Great for everyday casual wear. Features graphic print of logo in white on upper left sleeve.</p>
<ul>
<li>100% Cotton</li>
<li>Relaxed Fit</li>
</ul>
</html>
This field is supported by supplementary feeds.
product_type
Type: string
Max character limit: 750
Category the item belongs to, according to your business's product categorization system, if you have one. You can also enter a Google product category. For commerce, represents the product category in your internal system. Learn more about
product categories
for commerce.
Example:
Home & Garden > Kitchen & Dining > Appliances > Refrigerators
video[0].url
video[1].url
video[2].url
video[3].url
... up to
video[19].url
Type: string
Up to 20 fields each containing a link to a video of your item. Must be a direct link to download the video file, not a link to a video player such as YouTube.
The maximum video file size is 200 MB. Supported formats include: .3g2, .3gp, .3gpp, .asf, .avi, .dat, .divx, .dv, .f4v, .flv, .gif, .m2ts, .m4v, .mkv, .mod, .mov, .mp4, .mpe, .mpeg, .mpeg4, .mpg, .mts, .nsv, .ogm, .ogv, .qt, .tod, .ts, .vob and .wmv
Example:
http://www.jaspersmarket.com/product_video.avi
This field is supported by supplementary feeds.
additional_variant_attribute
Type: string
Additional attributes that are not core attributes (size, color, gender, pattern, and so on). Do not use a core attribute as an additional attribute. Learn more about
Product Variants
.
Example:
Scent:Fruity, Flavor:Strawberry
This field is supported by supplementary feeds.
unit_price
Type: string
Provide this information for any products customarily sold by a unit of measurement (for example "$10 / pound"). To specify this information, provide the following:
Amount value
: this is a float
Currency
: any supported currency
Unit type
: any of the following measurements:
Centiliters:
cl
Centimeters:
cm
Count:
ct
Cubic Meters:
cbm
Feet:
ft
Fluid Ounces:
fl oz
Gallons:
gal
Grams:
g
Inches:
in
Kilograms:
kg
Liters:
l
Meters:
m
Milligrams:
mg
Milliliters:
ml
Ounces:
oz
Pints:
pt
Pounds:
lb
Quarts:
qt
Square Feet:
sqft
Square meters:
sqm
Yards:
yd
This information is uploaded via feed uploads in the
unit_price
field in a JSON format as follows:
{value: 10.0, currency: "USD", unit: "lb"}
It can also be uploaded via XML as follows:
<unit_price>
 <value>10</value>
 <currency>USD</currency>
 <unit>lb</unit>
</unit_price>
Example: Download a
sample CSV file
with an example of adding
unit_price
to products.
gtin
Type: string
The item’s Global Trade Item Number (GTIN). Providing a GTIN is recommended to help classify the item. The GTIN may appear on the barcode, packaging or book cover. Not all items have a GTIN. Only provide one if you’re sure it’s correct. Don’t include dashes or spaces.
GTIN types:
UPC (North America / GTIN-12): 12-digit number.
EAN (Europe / GTIN-13): 13-digit number.
JAN (Japan / GTIN-13): 8 or 13-digit number.
ISBN (for books / ISBN-13): 13-digit number. Convert any 10-digit ISBN-10 numbers to ISBN-13.
ITF-14 (for multipacks / GTIN-14): 14-digit number.
Example:
4011200296908
This field is supported by supplementary feeds.
mpn
Type: string
Max characters: 100.
The item’s manufacturer part number (MPN), a unique alphanumeric code assigned by the manufacturer in some industries to identify a specific item or part. It may appear on the packaging, label or etched directly onto the item. Providing a MPN is recommended to help classify the item if there is no GTIN. Not all items have a MPN. Only provide one if you’re sure it’s correct.
Example:
JAS12345PER
expiration_date
Type: date
Product expiration. If the product is expired, it won't be shown on Facebook. This date should follow the
ISO‑8601
(
YYYY‑MM‑DD
) format.
return_policy_info
Type: string
Specify a return window for this item, which overrides your shop's default return window. Using this field in your data feed is an alternative to setting up a custom return window manually in Commerce Manager.
Learn more about return windows
.
Indicate whether the item is final sale (true or false) and the number of days of the the return window (for final sale, enter 0 days).
Example of an item with a 30 day return window: {is_final_sale: "false", return_policy_days: "30"}
Example of a final sale item:
{is_final_sale: "true", return_policy_days: "0"}
mobile_link
Type: string
Link to mobile-optimized page for item on the merchant's website.
applink
Type: string
Provide deep links in feed following the
App Links
specification. Deep link information in feed takes precedence over any information we collect with App Links metadata with our web crawler.
If you already have deep link information from App Links, you don't need to specify this data. Information from App Links is used to display the correct deep link. To display deep links in your ads, see
Dynamic Ads, Ad Template
.
Supported applinks:
applink.ios_url
,
applink.ios_app_store_id
,
applink.ios_app_name
,
applink.android_url
,
applink.android_package
,
applink.android_app_name
,
applink.windows_phone_url
,
applink.windows_phone_app_id
,
applink.windows_phone_app_name
,
applink.ipad_url
,
applink.ipad_app_store_id
,
applink.ipad_app_name
.
For Android, we require
applink.android_package
and url is optional. For other applinks, a valid url is required.
Learn more about
product deep links
.
disabled_capabilities
Used to control the channel visibility of each specific product in your catalog. With this feature, you can enable or disable your products from being displayed in Shops, Marketplace Shops, Instagram Product Tagging, Dynamic Ads, and Mini Shops.
Learn more about
disabled_capabilities
.
Additional Required Fields for Selling in India
Attribute and Type
Description
origin_country
Type: ISOCountryCode (2 letter country code)
The item's country of origin. Enter the two-letter ISO country code
Example value:
US
This field is supported by supplementary feeds.
importer_name
Type: string
If the country of origin is not India, provide the legal entity name of the item's importer
Example value:
Jasper's Market Inc.
This field is supported by supplementary feeds.
importer_address
Type: JSON structure
If the country of origin is not India, provide the operational address of the importer. This field uses a JSON structure, which contains the following fields:
street1
- string, required. The first line of the street address
street2
- string, optional. The second line of the street address.
city
- string, required. The city name.
region
- string, optional. The region, state or province. (In the US this is to be used for US State)
postal_code
- string, optional (in the US this is to be used for Zip Code)
country
- required. Enter the ISO Country code (2-letter country code)
The overall address will be displayed to users in the following format:
street1
,
street2
(if present),
city
,
region
(if present)
postal_code
(if present),
country
(full name, localized for the user).
This example value:
`
{ street1: "1 Hacker Way", street2: "Building 18", city: "Menlo Park", region: "CA", postal_code: "94025", country: "US" }
will be rendered as "1 Hacker Way, Building 18, Menlo Park, CA 94025 United States of America"
This field is supported by supplementary feeds.
manufacturer_info
Type: string
Required for Shops only.
Information about the product's manufacturer, such as the manufacturer name and address.
Example: The Manufacturer Co. - 1 Hacker Way, Menlo Park, CA 94025 USA
This field is supported by supplementary feeds.
wa_compliance_category
Type: string
Required for selling on WhatsApp only.
If the item is a non-physical good sold in India, such as a service, use this field to indicate that the item is exempt from providing the country of origin (
origin_country
), importer name (
importer_name
) and importer address (
importer_address
).
Supported values (case sensitive):
COUNTRY_ORIGIN_EXEMPT
: The item is exempt.
DEFAULT
: The item is not exempt. This is the default value if you leave the field blank.
Supported Fields — Localized Catalogs
Requirements
You must include an
id
field in your
secondary data feed file
. To run Advantage+ catalog ads, the ID for each item must match its ID in your original catalog data feed and its content ID from your pixel.
You must include an
override
field. In this field, enter the ISO codes for the languages or countries that you want to provide localized information for. In this field, enter the ISO codes for the languages or countries that you want to provide localized information for. The value in the
override
column should be either a
supported ISO language code
or a
supported ISO country code
. Learn more about
supported language codes and country codes
.
price
,
sale_price
,
unit_price
,
base_price
,
status
(visibility), and
availability
must only be provided in a country feed. These fields cannot be provided in a language feed. This helps ensure customers see the correct localized product data.
Learn more about the
id
and
override
fields in
Create a data feed with localized inventory information, steps 2 and 3
.
Products
title
description
availability
link
brand
price
sale_price
sale_price_effective_date
color
size
material
pattern
custom_label_0
custom_label_1
custom_label_2
custom_label_3
custom_label_4
short_description
additional_variant_attribute
applink.ios_url
,
applink.ios_app_store_id
,
applink.ios_app_name
,
applink.android_url
,
applink.android_package
,
applink.android_app_name
,
applink.windows_phone_url
,
applink.windows_phone_app_id
,
applink.windows_phone_app_name
,
applink.ipad_url
,
applink.ipad_app_store_id
,
applink.ipad_app_name
To localize any applink fields, you must provide all of them. Learn more about
product deep links
.
image[0].url
,
image[0].tag[0]
To localize an image, you must use the
image[0].url
,
image[0].tag[0]
nested image fields. The
image_link
field isn't supported for localization.
For reference, see the
main list of fields for products
.
Hotels
name
description
base_price
sale_price
brand
url
neighborhood
longitude
latitude
image[0].url
,
image[0].tag[0]
internal_label
applink.ios_url
,
applink.ios_app_store_id
,
applink.ios_app_name
,
applink.android_url
,
applink.android_package
,
applink.android_app_name
,
applink.windows_phone_url
,
applink.windows_phone_app_id
,
applink.windows_phone_app_name
,
applink.ipad_url
,
applink.ipad_app_store_id
,
applink.ipad_app_name
To localize any applink fields, you must provide all of them. Learn more about
product deep links
.
For reference, see the main list of fields for
hotels
.
Flights
description
url
origin_city
destination_city
price
one_way_price
image[0].url
,
image[0].tag[0]
custom_label_0
custom_label_1
custom_label_2
custom_label_3
custom_label_4
custom_number_0
custom_number_1
custom_number_2
custom_number_3
custom_number_4
internal_label
applink.ios_url
,
applink.ios_app_store_id
,
applink.ios_app_name
,
applink.android_url
,
applink.android_package
,
applink.android_app_name
,
applink.windows_phone_url
,
applink.windows_phone_app_id
,
applink.windows_phone_app_name
,
applink.ipad_url
,
applink.ipad_app_store_id
,
applink.ipad_app_name
To localize any applink fields, you must provide all of them. Learn more about
product deep links
.
For reference, see the main list of fields for
flights
.
Destinations
name
description
url
price
neighborhood
longitude
latitude
image[0].url
,
image[0].tag[0]
custom_label_0
custom_label_1
custom_label_2
custom_label_3
custom_label_4
custom_number_0
custom_number_1
custom_number_2
custom_number_3
custom_number_4
internal_label
applink.ios_url
,
applink.ios_app_store_id
,
applink.ios_app_name
,
applink.android_url
,
applink.android_package
,
applink.android_app_name
,
applink.windows_phone_url
,
applink.windows_phone_app_id
,
applink.windows_phone_app_name
,
applink.ipad_url
,
applink.ipad_app_store_id
,
applink.ipad_app_name
To localize any applink fields, you must provide all of them. Learn more about
product deep links
.
For reference, see the main list of fields for
destinations
.
Home Listings
name
description
price
url
image[0].url
,
image[0].tag[0]
For reference, see the main list of fields for
home listings
.
Vehicles
title
description
price
sale_price
url
image[0].url
,
image[0].tag[0]
For reference, see the main list of fields for
vehicles
.
OpenGraph Tags
Each field has a maximum of 500 characters.
Name
Description
og:title
Required
.
Title of the item. Supports pixel-based catalogs.
The primary image link is required. Any additional image links are optional.
og:description
Required
.
Description of the item. Supports pixel-based catalogs.
og:url
Required
.
Complete URL for the product page. Supports pixel-based catalogs.
og:image
Required for primary link. Optional for additional image links
.
Link to the image used on the product page. The primary image link is required. Any additional image links are optional. Supports pixel-based catalogs.
og:locale
Required if using
multilanguage catalogs
.
Specifies which website version the product is from; for example,
en_GB
for the UK website. Supports pixel-based catalogs.
og:price:amount
Required
.
Current price of the item. For the separator, use '.' rather than ',' to indicate a decimal point. Don't include symbols, such as “$” in the price. Supports pixel-based catalogs.
Example:
1500.00
og:price:currency
Required
.
Currency for the price in ISO format. Supports pixel-based catalogs.
Example:
USD
product:brand
Required
.
Brand name of the item. Supports pixel-based catalogs.
product:availability
Required
.
Current availability of the item:
in stock
,
out of stock
,
available for order
,
discontinued
. Supports pixel-based catalogs.
product:catalog_id
Optional
.
Unique catalog ID for item. Can be a variant for a product. This maps to
retailer_id
after the product is imported. The
id
field must match the content ID for your pixel. Supports pixel-based catalogs.
product:category
Optional
.
Max character limit: 250. Supports pixel-based catalogs.
For Advantage+ catalog ads
, represents predefined values (string or category ID) from
Google's product taxonomy
.
For commerce
, represents the category of your product according to the
Google's product taxonomy
. Learn more about
product categories
for commerce.
Learn more about
Google Product Category for Catalog Items, Ads Help Center
.
product:condition
Required
.
Current condition of the item:
new
,
refurbished
,
used
. Supports pixel-based catalogs.
product:custom_label_[0-4]
Optional
.
Max character limit: 100
Additional information about the item you want to include. Supports pixel-based catalogs.
product:gender
Optional
.
Determines gender for sizing:
Female
,
Male
,
Unisex
. Supports pixel-based catalogs.
product:item_group_id
Optional
.
For Advantage+ catalog ads
- Items that are variants of a product. Provide the same item_group_id for all items that are variants. For example, a red Polo Shirt is a variant of Polo Shirt. Facebook maps this to the retailer_product_group_id once we get your feed. With Advantage+ catalog ads, Facebook picks only one item out of the group based on the signal we receive from the pixel or app event.
For commerce - Provide the same product_group_id for all items that are variants. For example, Red Polo Shirt is a variant of Polo Shirt. Facebook maps this to retailer_product_group_id once we get your feed. Learn more about Product Variants. Supports pixel-based catalogs.
Example:
FB1234_shirts
product:gtin
Optional
.
Product's Global Trade Item Number (GTINs). Exclude dashes and spaces. Submit only valid GTINs as defined by the GTIN validation guide. Supported values are
UPC
(North America, 12 digits),
EAN
(Europe, 13 digits),
JAN
(Japan, 8 or 13 digits),
ISBN
(books, 13 digits). Supports pixel-based catalogs.
Example:
4011200296908
product:isbn
Optional
.
International Standard Book Number. ISBNs consist of 13 digits. Supports pixel-based catalogs.
product:mfr_part_no
Optional
.
Unique manufacturer part number for item. For commerce, Daily Deals inventory must also include brand if
mpn
is provided.Supports pixel-based catalogs.
Example:
100020003
material
Optional
.
Material the item is made from. Supported values:
cotton
,
denim
,
leather
.  Supports pixel-based catalogs.
Example:
cotton
product:locale
Required if using
multilanguage catalogs
.
Specifies which website version the product is from; for example,
en_GB
for the UK website. Supports pixel-based catalogs.
product:price:amount
Required
.
Current price of the item. For the separator, use '.' rather than ',' to indicate a decimal point. Don't include symbols, such as “$” in the price. Supports pixel-based catalogs.
Example:
1500.00
product:price:currency
Required
.
Currency for the price in ISO format. Supports pixel-based catalogs.
Example:
USD
product:retailer_item_id
Required
.
Retailer's ID for the item. Supports pixel-based catalogs.
product:sale_price:amount
Optional
.
Discounted price if the item is on sale. Use "." as the decimal for the sale price. The sale price is required if you plan to use an overlay for discounted prices. Supports pixel-based catalogs.
Note
: In general, for pixel-based catalogs, we recommend just capturing any changes in price using the main og:price:amount tag. If you do use the sale price tag, make sure to also use
product:sale_price_dates:start
and
product:sale_price_dates:end
tags to indicate when your sale starts and ends. If there is no end date, the sale price may display indefinitely.
Example:
9.99
product:sale_price:currency
Optional
.
Currency of the discounted price if the item is on sale in
3-digit ISO currency code
. Supports pixel-based catalogs.
Example:
USD
product:sale_price_dates:start
Optional
.
Start date and time for your sale in your timezone, written as
YYYY-MM-DDT0:00-23:59/YYYY-MM-DDT0:00-23:59
, separated by a slash. Write the start and end dates as
YYYY-MM-DD
. Write the time in a 24-hour format (0:00 to 23:59). Add a "T" after each date and then include the time, where the end time represents the time zone. In the example,
03:00
denotes the time zone. Supports pixel-based catalogs.
Example:
2017-11-01T12:00-03:00/2017-12-01T00:00-03:00
product:sale_price_dates:end
Optional
.
End date and time for your sale in your timezone, written as
YYYY-MM-DDT0:00-23:59/YYYY-MM-DDT0:00-23:59
, separated by a slash. Write the start and end dates as
YYYY-MM-DD
. Write the time in a 24-hour format (0:00 to 23:59). Add a "T" after each date and then include the time, where the end time represents the time zone. In the example,
03:00
denotes the time zone. Supports pixel-based catalogs.
Example:
2017-11-01T12:00-03:00/2017-12-01T00:00-03:00
Schema.org – Required Tags
Each field has a maximum of 500 characters.
Name
Description
name
Title of the item.
brand
Brand of the item.
description
Description of the item.
productID
Retailer's ID for the item.
url
Complete URL for the product page.
image
Link to the image used on the product page.
price
Current price of the item. Don't include symbols, such as “$” in the price. Include this entry under “offers”. Format the price as a number, followed by the 3-digit ISO currency code
(ISO 4217 standards)
, with a space between cost and currency. Use a period (".") as the decimal point.
We recommend that you include only one (1) currency in your catalog so customers don't see mixed currencies for products in your ads or commerce channels. To add product information and prices that will display for other countries or languages,
upload a country feed or language feed to your catalog
instead.
priceCurrency
Currency for the price, in ISO format (for example,
USD
). Include this entry under “offers”. For the separator, use '.' rather than ',' to indicate a decimal point. Don't include symbols, such as “$” in the price. Example: 1500.00.
availability
Current availability of the item:
in stock
,
out of stock
,
available for order
,
discontinued
. Include this entry under “offers”.
condition
Current condition of the item:
new
,
refurbished
, or
used
. Include this entry under “offers”.
JSON-LD for Schema.org — Required Tags
Each field has a maximum of 500 characters.
Extracted from
schema.org/Product
Name
Description
name
Title of the item.
brand
Brand of the item.
description
Description of the item.
productID
Retailer's ID for the item.
url
Complete URL for the product page.
offers
Array of objects of type
schema.org/Offer
.
image
Link to the image used on the product page.
Extracted from
schema.org/Offer
(as a part of product offers)
Name
Description
price
Current price of the item. Don't include symbols, such as “$” in the price. Include this entry under “offers”.
priceCurrency
Currency for the price, in ISO format (for example,
USD
). Include this entry under “offers”.
availability
Current availability of the item:
in stock
,
out of stock
,
available for order
,
discontinued
. Include this entry under “offers”.
condition
Current condition of the item:
new
,
refurbished
, or
used
. Include this entry under “offers”.
JSON Schema Export
We have provided a JSON schema download of all catalog main fields and category fields here:
Main fields download
Main + category fields download
Please note that this JSON schema is not an uploadable feed format, but rather provided as an alternative reference for feed fields, examples, and data types other than what already exists in our documentation. The schema is primarily meant for developers who are seeking to programmatically align internal category and field mapping with Meta’s catalog schema. Please defer to the feed formatting elsewhere in this documentation for uploadable feeds.
All fields under the
common
key will be main fields. Otherwise, the category name will be the parent key. Each field’s format follows this example:
"item_group_id": {
          "description": "Use this field to create variants of the same item. Enter the same group ID for all variants within a group. Learn more about variants: https:\/\/www.facebook.com\/business\/help\/2256580051262113 Character limit: 100.",
          "example": "K456653443",
          "type": "String",
          "required": false,
          "recommended": false
      },
Note that only category-specific fields will have a
"recommended": true
value (as they are all optional otherwise), in order to best understand prioritization.
Learn More
Ads Help Center
Create a Data Feed for a Catalog
Methods to Add Catalog Items
Upload a Data Feed to a Catalog
Data Feed Specifications
How to Create a Data Feed for Your Catalog Using a Template, Help Center
Data Feed Specifications for Catalogs
Set Up a Catalog for Multiple Languages and Countries
API Reference
Data Feed
Data Feeds in Catalog
Feed API
Item
Item Search in Catalog
Product Sets
Marketing API
Hotel Ads, Supported Fields
Flight Ads, Supported Fields
Destination Ads, Supported Fields
Automotive Inventory Ads, Supported Fields –
Vehicle
and
Dealership
Real Estate Ads, Supported Fields
Product Deep Links

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/microdata-tags:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Microdata Tags
Microdata
is an HTML specification used to nest metadata within existing content on webpages. Microdata uses a supporting vocabulary to describe an item and name-value pairs to assign values to its properties.
You can use microdata tags on your website to provide information about your products using a standardized format. We support these 3 formats:
OpenGraph
— Place the microdata in the
head
element of your website.
Schema.org
— Place the microdata across the product page where the products are located.
JSON-LD for Schema.org
— Place the microdata within the script tag (see the example below).
Depending on the type of protocol you choose, the microdata needs to be in the right location on your website.
To test if your microdata tags are working, use this
microdata debugger tool
.
If you update microdata on your website, your product information won’t be updated in Commerce Manager until your pixel has fired at least once, meaning that someone has interacted with that item on your website. If the product doesn’t receive any traffic on your website after you update its microdata, it won’t be updated in your catalog.
OpenGraph
Pixel-based catalogs use activity from your pixel to add products to your catalog. Before you can successfully add a product to your catalog, you first need to add required tags that include information about the product ("microdata") on its product page. 
See
required and optional tags for OpenGraph
.
Currently, only ecommerce catalogs can be created, leveraging the Facebook pixel.
Example
- OpenGraph
<meta property="og:title" content="Facebook T-Shirt">
<meta property="og:description" content="Unisex Facebook T-shirt, Small">
<meta property="og:url" content="https://example.org/facebook">
<meta property="og:image" content="https://example.org/facebook.jpg">
<meta property="product:brand" content="Facebook">
<meta property="product:availability" content="in stock">
<meta property="product:condition" content="new">
<meta property="product:price:amount" content="7.99">
<meta property="product:price:currency" content="USD">
<meta property="product:retailer_item_id" content="facebook_tshirt_001">
<meta property="product:item_group_id" content="fb_tshirts">
Schema.org
See
required tags for Schema.org
.
Example
- Schema.org
<div itemscope itemtype="http://schema.org/Product">
  <meta itemprop="brand" content="facebook">
  <meta itemprop="name" content="Facebook T-Shirt">
  <meta itemprop="description" content="Unisex Facebook T-shirt, Small">
  <meta itemprop="productID" content="facebook_tshirt_001">
  <meta itemprop="url" content="https://example.org/facebook">
  <meta itemprop="image" content="https://example.org/facebook.jpg">
  <div itemprop="value" itemscope itemtype="http://schema.org/PropertyValue">
    <span itemprop="propertyID" content="item_group_id"></span>
    <meta itemprop="value" content="fb_tshirts"></meta>
  </div>
  <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
    <link itemprop="availability" href="http://schema.org/InStock">
    <link itemprop="itemCondition" href="http://schema.org/NewCondition">
    <meta itemprop="price" content="7.99">
    <meta itemprop="priceCurrency" content="USD">
  </div>
</div>
JSON-LD for Schema.org
See
required tags for JSON-LD for Schema.org
.
Example
— JSON-LD for Schema.org
<script type="application/ld+json">
{
  "@context":"https://schema.org",
  "@type":"Product",
  "productID":"facebook_tshirt_001",
  "name":"Facebook T-Shirt",
  "description":"Unisex Facebook T-shirt, Small",
  "url":"https://example.org/facebook",
  "image":"https://example.org/facebook.jpg",
  "brand":"facebook",
  "offers": [
    {
      "@type": "Offer",
      "price": "7.99",
      "priceCurrency": "USD",
      "itemCondition": "https://schema.org/NewCondition",
      "availability": "https://schema.org/InStock"
    }
  ],
  "additionalProperty": [{
    "@type": "PropertyValue",
    "propertyID": "item_group_id",
    "value": "fb_tshirts"
  }]
}
</script>
Learn More
About Microdata Tags for Catalogs, Ads Help Center
Microdata Debugger Tool
Reference, Catalog

Content from https://developers.facebook.com/docs/marketing-api/catalog/localized-catalog-da:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Localized Catalog for Advantage+ Catalog Ads
Overview
Use this guide to set up your localized catalog for Advantage+ catalog ads.
Your
catalog
is an object (or container) of information about your products where you upload your inventory.
How it Works
Meta provides localized catalog functionality, enabling you to set up your product catalog to show items in ads or shops for items in different countries. Localizing the currency, the price, and the translated title or description are common cases. You can also give a localized product URL to navigate the customer to your country or language-specific product website. Learn more about how to set up your
localized catalog
.
Build a Template for Advantage+ Catalog Ads
When building a template for
Advantage+ catalog ads
, you can specify customizations to the creative that are in different languages. For example, you might want to show a different headline to viewers of your ad who speak another language.
In addition to the other fields in the creative's template data (within the object story spec), you can specify an
array
of customizations, in the
customization_rules_spec
field, where each customization has the following form:
Field Name
Description
Accepts Template Parameters
customization_spec
type: object
Required
.
Describes the language for the customization. Learn how to
Create Advantage+ Catalog Ads for Multiple Languages and Countries, Ads Help Center
.
Example:
{'language' => 'en_XX'}
No
message
type: string
Optional
.
Message for your ad, visible on Instagram.
Example:
Test {{product.name | titleize}}
Yes
link
type: string
Optional
.
Link to your website; used to generate the caption of the ad. This field is always replaced with the
link
field from your product feed, except the end card of
Carousel Ads
, which links to this. This cannot be a URL on
Facebook.com
.
Example:
//link.com
For Collection ads, you can use
link
to provide an Instant Experiences document, as detailed in
Collection Ads
.
Example:
https://fb.com/canvas_doc/CANVAS_ID
No
name
type: string
Optional
.
Name or title for your ad, visible on Instagram.
Example:
Headline {{product.price}}
Yes
description
type: string
Optional
.
Description for your ad. Not visible on Instagram.
Example:
Description {{product.
description}}
Yes
template_url_spec
type: object
Optional
.
Can be used to provide a web deep link, as detailed in
Click Tracking and Templates
.
Note
: We only support the web deeplink.
Example:
{'web' => {'url' => DEEP_LINK}}
Example:
{'web' => {'url' => 'example://link/?id={{product.
retailer_id}}'}}
Yes
video_id
type: integer
Optional
.
For Collection ads only, you can use
video_id
to provide video for Collection hero media, as detailed in
Collection Ads
.
Example:
1234
No
picture
type: string
Optional
.
For Collection ads only, you can use
picture
to provide an image for Collection hero media, as detailed in
Collection Ads
.
Example:
https://url/image.jpg
No
When specifying the array of customizations, only
one
of the customizations should specify only the
customization_spec
. This identifies the language of the non-customized text that has been used in the
template_data
.
When the ad is rendered, the rendering language is chosen, based on the viewer's interface language and other signals. Meta also uses product properties from the catalog language feed to match the rendering language, if available.
See also
Build a Creative Template
,
Supported Fields for Advantage+ Catalog Ads
, and
Supported Feed Formats for Advantage+ Catalog Ads
.
Template for Collection Ads
When building
Collection Ads
, you can specify customizations to the creative, similarly as multi-language Advantage+ catalog ads via
customization_rules_spec
.
Limitations
:
link
for Collection ads must be created
using templates
— Instant Storefront, formerly "Sell Products, Grid (1932289657009030)"
Template for Collection Ads is only delivered via a Facebook Mobile Feed placement only.
Examples
Preview Multi-Language or Country Advantage+ Catalog Ads for a Different Language or Country
curl -X GET \
  -d 'ad_format="DESKTOP_FEED_STANDARD"' \
  -d 'product_item_ids=[
       "<PRODUCT_ITEM_ID>"
     ]' \
  -d 'dynamic_customization={
       "language": "fr_XX",
       "country": "FR"
     }' \
  -d 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/
v22.0
/<CREATIVE_ID>/previews
Create a Carousel Advantage+ Catalog Ads Template with Multiple Languages
curl -X POST \
  -F 'name="Dynamic Ad Template Creative Sample"' \
  -F 'object_story_spec={
       "page_id": "<PAGE_ID>",
       "template_data": {
         "message": "English Test {{product.name | titleize}}",
         "link": "http://www.example.com/englishurl",
         "name": "English Headline {{product.price}}",
         "description": "English Description {{product.description}}",
         "customization_rules_spec": [
           {
             "customization_spec": {
               "language": "en_XX"
             }
           },
           {
             "customization_spec": {
               "language": "fr_XX"
             },
             "message": "French Test {{product.name | titleize}}",
             "link": "http://www.example.com/frenchurl",
             "name": "French Headline {{product.price}}",
             "description": "French Description {{product.description}}",
             "template_url_spec": {
               "web": {
                 "url": "http://www.example.com/frenchdeeplink"
               }
             }
           }
         ]
       }
     }' \
  -F 'product_set_id="<PRODUCT_SET_ID>"' \
  -F 'template_url_spec={
       "web": {
         "url": "http://www.example.com/englishdeeplink"
       }
     }' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/
v22.0
/act_<AD_ACCOUNT_ID>/adcreatives
Create a Collection Ad with Image Hero Media with Multiple Languages
curl -X POST \
  -F 'object_story_spec={
       "page_id": "<PAGE_ID>",
       "link_data": {
         "picture": "<IMAGE_URL>",
         "link": "<CANVAS_LINK>",
         "name": "English Creative title",
         "message": "English Creative message",
         "call_to_action": {
           "type": "LEARN_MORE"
         },
         "retailer_item_ids": [
           0,
           0,
           0,
           0
         ],
         "customization_rules_spec": [
           {
             "customization_spec": {
               "language": "en_XX"
             }
           },
           {
             "customization_spec": {
               "language": "fr_XX"
             },
             "picture": "<IMAGE_URL_FR>",
             "link": "<CANVAS_LINK_FR>",
             "name": "French Creative title",
             "message": "French Creative message"
           }
         ]
       }
     }' \
  -F 'product_set_id="<PRODUCT_SET_ID>"' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/
v22.0
/act_<AD_ACCOUNT_ID>/adcreatives
Create a Collection Ad with Video Hero Media with Multiple Languages
curl -X POST \
  -F 'object_story_spec={
       "page_id": "<PAGE_ID>",
       "video_data": {
         "video_id": "<VIDEO_ID>",
         "image_url": "<IMAGE_URL>",
         "title": "English Creative title",
         "message": "English Creative message",
         "call_to_action": {
           "type": "LEARN_MORE",
           "value": {
             "link": "<CANVAS_LINK>"
           }
         },
         "retailer_item_ids": [
           0,
           0,
           0,
           0
         ],
         "customization_rules_spec": [
           {
             "customization_spec": {
               "language": "en_XX"
             }
           },
           {
             "customization_spec": {
               "language": "fr_XX"
             },
             "video_id": "<VIDEO_ID_FR>",
             "picture": "<IMAGE_URL_FR>",
             "link": "<CANVAS_LINK_FR>",
             "name": "French Creative title",
             "message": "French Creative message"
           }
         ]
       }
     }' \
  -F 'product_set_id="<PRODUCT_SET_ID>"' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/
v22.0
/act_<AD_ACCOUNT_ID>/adcreatives
Create a Collection Ads with Dynamic Video Hero Media with Multiple Languages
curl -X POST \
  -F 'object_story_spec={
       "page_id": "<PAGE_ID>",
       "template_data": {
         "format_option": "collection_video",
         "link": "<CANVAS_LINK>",
         "name": "English Creative title",
         "message": "English Creative message",
         "call_to_action": {
           "type": "LEARN_MORE"
         },
         "retailer_item_ids": [
           0,
           0,
           0,
           0
         ],
         "customization_rules_spec": [
           {
             "customization_spec": {
               "language": "en_XX"
             }
           },
           {
             "customization_spec": {
               "language": "fr_XX"
             },
             "link": "<CANVAS_LINK_FR>",
             "name": "French Creative title",
             "message": "French Creative message"
           }
         ]
       }
     }' \
  -F 'product_set_id="<PRODUCT_SET_ID>"' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/
v22.0
/act_<AD_ACCOUNT_ID>/adcreatives
Learn More
Localized Catalog Setup
Localized Catalog for Instagram Shopping
Create Advantage+ Catalog Ads for Multiple Languages and Countries, Ads Help Center
Build a Creative Template
Catalog, Overview
Supported Fields for Advantage+ Catalog Ads
Supported Feed Formats for Advantage+ Catalog Ads
Advantage+ Catalog Ads - Create Ads

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/inventory:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Inventory (see
Quantity to Sell
)
The
inventory
field in your Product Catalog represents the stock level for each product available to sell on your Facebook Shop or Instagram Shopping account. This value is reflected in the Product Details Page (PDP) and helps buyers understand how many items are available. Keeping it accurate and up-to-date is instrumental to the experience, as it dictates when your products are out-of-stock or can lead to overselling if incorrect.
NOTE:
The
inventory
field is being deprecated and replaced with a new
quantity_to_sell_on_facebook
field. While we will support the old field name for the near term, we recommend that you use the new name. See
Supported Fields for Products - Advantage+ Catalog Ads & Commerce
for more about this update.
Note
: An item without inventory setup cannot be tagged or purchased. However, you still can use it for Advantage+ catalog ads without checkout.
Inventory Fluctuation
The
inventory
field is dynamic, which means that its value fluctuates as people buy products from your Facebook Shop or Instagram Shopping account. Whenever a user places an order, the inventory level of the corresponding products is decremented.
The Commerce Platform automatically increment this value or re-stocks the product in case of user-initiated cancellations.
In the case of seller-initiated cancellations, you can re-stock a product at cancellation time and increment the corresponding inventory level, by setting the
restock_items
field of the
cancellations API endpoint
.
The value that you provide through product catalog uploads or other techniques (see
Inventory Update Strategies
for more information) is considered the source of truth, and is always used to overwrite the value cached on our backend.
We keep the following types of inventory counts on our end:
The
provided inventory
is the value that you provide through product catalog uploads or other techniques (see
Inventory Update Strategies
for more information).
The
available inventory
is the value that customers can purchase and it takes under consideration not processed orders.
Learn more about these inventory types; see
Product Life Cycle
.
Out-Of-Stock Products
As people purchase products on your Facebook Shop or Instagram Shopping account, the
inventory
value is decremented. When this value reaches
0
, we mark the product as 'Out-Of-Stock' and restrict anyone from purchasing additional units. You should do a best-effort attempt at restocking your products regularly as 'Out-Of-Stock' products negatively affect the user experience and your brand perception.
If a buyer finds an Out-Of-Stock product, we try our best to switch the Product Details page to a variant that has units 'In-Stock' based on the
inventory
value of the product's variant in your product catalog.
Discontinued Products
When a product is discontinued, you may be tempted to simply delete it from your product catalog.
We don't recommend this.
Deleting products from your catalog may cause undesirable effects, such as product tags and images disappearing.
We strongly recommend that you only delete products after a significant time has passed (months)
.
Instead of deleting products, you should set the
visibility
field of a discontinued product to
staging
. This ensures that the Commerce Platform can link your product back to a known entity and manage different situations gracefully.
Product Life Cycle
Every time you update inventory, we update the provided inventory. This number does not correspond to the number of items available for customer purchase. We track incoming orders (which may be in different states) and subtract unacknowledged orders to calculate a final available inventory. This number may not be exposed outside of our platform.
Available
Inventory =
Provided
Inventory -
Not Acknowledged Orders
.
After orders are acknowledged, there is a 30 minute buffer to allow you to process orders and update inventory numbers (through the catalog) before we remove those acknowledged orders from our counter.
Over-selling
To scale the Commerce Platform to thousands of merchants, we've made a conscious decision to not support synchronous inventory management. As a consequence, we don't support making atomic purchase transactions coupled with decrementing stock levels in
your warehouse
. If your inventory is shared across multiple channels, you may unexpectedly over-sell products on Facebook or Instagram. This could happen for fast-selling products available in limited quantity.
When you cannot fulfill orders due to over-selling situations, you should initiate a
cancellation
and set the
reason_code
to
OUT_OF_STOCK
.
If you are frequently faced with over-selling, you can process orders at a more frequent basis, and adjust the inventory level of your products accordingly.
Inventory Integration Strategy
You can update inventory in a different way depending on the type of integration you are doing:
By using the Commerce Manager UI (small product set, testing, and so on)
A feed with scheduled or manual upload
Using the Feed API
Using the Batch API
Inventory Update Strategies
Because of the asynchronous nature of distributed systems, the
inventory
value in your product catalog may go out-of-sync, regardless how fast you update your inventory levels. Below are some techniques that you may want to consider, to minimize race-conditions.
Pre-allocated Inventory
The most effective way to avoid over-selling is to pre-allocate inventory to your Facebook Shop or Instagram Shopping channels. Dedicating inventory for each of your sales channel guarantees that sales happening on any individual channel do not interfere with each other. This strategy can be applied to part or the totality of your product catalog.
Slow-Selling Products
For products that sell at a normal pace, or those with deep inventory, the risk of over-selling is relatively low. In this situation, you can keep your product catalog update strategy simple:
Configure a scheduled feed for daily/hourly updates. This feed should contain all fields, including the most up-to-date
inventory
value.
Fast-Selling Products
For fast-selling products, with shallow or very dynamic inventory, you may want to update volatile fields such as
inventory
in a more timely basis. You can use the Real-Time Batch API for this purpose. Here's a general strategy that you can follow:
Configure a scheduled feed for daily/hourly updates. This feed should contain all mandatory Product Catalog fields, and omit volatile fields such as
inventory
. The purpose of this feed is to update fields that are more static in nature, and defer the updates of volatile fields using the Real-Time API.
Use the
Real-Time Batch API
to update volatile fields such as
inventory
when the value changes in your backend, or at a fixed frequency. It is important that the fields updated using this technique are not included in your feed for consistency reasons.
Here's an example of updates using the Real-Time Batch API:
curl \
  -d @body.json \
  -H "Content-Type: application/json"
  {
    "access_token": "<ACCESS_TOKEN>",
    "item_type": "PRODUCT_ITEM",
    "requests": [      
      {
        "method": "UPDATE",
        "retailer_id": "SKU1234567",
        "data": {
          "inventory": "1337",
        }
      }
    ]
  } https://graph.facebook.com/<CATALOG_ID/batch
Batch API requests are asynchronous. You should check for the request status and its result to make sure that all your updates are successful. See the
Batch API documentation
for more information.
If you are managing a small number of products, you can also update each product individually using the Graph API directly in lieu of the Real-Time Batch API. Because of Graph API rate-limiting and throttling, this approach is only applicable to a small number of products. The exact number of products you can update using this approach depends on the quota applied to your Facebook app, a good rule of thumb is that you should use the Real-Time Batch API if you are updating more than a dozen of products at a time.
To update specific fields inside a product, you can make the following API call:
curl -d "inventory=1337" -X POST 
https://graph.facebook.com/<FACEBOOK_PRODUCT_ID>
access_token: PAGE_ACCESS_TOKEN
If using the Graph API, use a Facebook product ID.  If using the batch API, use your own ID, a.k.a. the
retailer_id
.
Inventory Thresholds
Another common technique to mitigate against over-selling is to take a cautious approach to inventory allocation. For example, when a particular item is close to running Out-Of-Stock as identified in your warehouse, you can set the inventory level in your Product Catalog to zero. This is effectively an optimization for under-selling, but can help if over-selling is a concern.
If you know how fast each of your products sell, you can partition them into different buckets and apply a different threshold for each bucket depending on its selling profile. Fast selling products will typically need a higher threshold value, while slow selling products can probably use a lower threshold value for being marked Out-Of-Stock.

Content from https://developers.facebook.com/docs/marketing-api/catalog/best-practices:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Best Practices
General Recommendations for a Commerce Catalog
We recommend to use this checklist to maximize the quality of your
commerce
catalog:
Store the product feed ID
Create inventory with the Catalog Batch API or Feed API support
Schedule feeds
Set up catalog during seller onboarding
Ensure that fields are visible
Ensure that the format is accurate for specific fields
Check for timely and accurate responsiveness
Product Feed ID
The product feed is used as the primary source for updating product catalogs on Facebook, and fetched by Facebook periodically according to the configured interval. You should store the product feed ID, and use it to get upload status, errors, and to change upload schedule.
Catalog Inventory Creation Support
To create inventory, use the
Feed API, Reference, Advantage+ Catalog Ads
,
Feed API, Reference, Commerce Platform
or
Batch API
.
Scheduled Feeds
Scheduled feeds don't support uploads more frequently than once per hour
. If you need to update inventory faster, use the
Direct Upload API
.
Seller Onboarding
Set up your catalog during
seller onboarding
and upload or configure your products using the
Product Feed API
.
Visibility
The
id
,
title
,
description
,
price
,
inventory
,
link
,
image_link
fields should be provided.
The
gtin
or
mpn
plus
brand
fields should be provided.
The
rich_text_description
(preferably) or
description
fields should be provided, well formatted (no extra spacing, punctuation is correct), and informative (may contain information on item size, volume, origin, and so on).
Ensure that the variant field's (such as
size
or
color
) value is provided for
every product variant
sharing a common
item_group_id
, even those that are out of stock.
Format
Ensure that the
description
does not contain HTML tags or character entities.
Ensure that the
price
is in the correct format and currency.
Ensure that the
sale_price
is provided for items on sale.
Ensure that the
google_product_category
is (at minimum) 2 levels deep.
Ensure that
product variants
are sharing the same
item_group_id
.
Ensure that the
availability
and
inventory
fields are populated according to a
agreed upon strategy
.
Use
additional_image_link
to add more product images (up to 10).
Make sure that product images satisfy catalog
requirements
.
Make sure that product titles satisfy catalog
requirements
.
Make sure that product descriptions satisfy catalog
requirements
.
Responsiveness
Ensure that the
link
URL responds with HTTP 200 OK.
Check the product catalog diagnostics tool for the following information each time you upload a new product feed:
Fix all upload errors, a product marked with an error will be rejected from your catalog.
Verify all warnings, some of warnings may affect product ingestion and prevent your product from being tagged or available for purchase.
Ensure that each product complies with the Facebook
Commerce Policies
. Product that violate the policy will be marked as
rejected
and will not be available for tagging or purchase.

Content from https://developers.facebook.com/docs/marketing-api/catalog/getting-started:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Get Started
This guide explains how to enhance your catalog and maximize discoverability and distribution of your items.
Before You Start
Before you start, please review these recommendations and guidelines:
If you manage multiple catalogs for different businesses or want an agency to access your catalogs, you may need to set up
Business Manager
.
The
catalog_management
permission grants your app the ability to create, read, update, and delete business-owned product catalogs of which the user is an admin. This permission grants access to related endpoints. By default, your app may only have access to product catalogs that are owned by admins and developers of the app when in developer mode. See
Catalog Management Reference
.
For a commerce catalog, before buyers can purchase items from you, you'll need to upload your products information into a
catalog
. Learn how to create a new ecommerce catalog using the
Commerce Manager
.
The
business_management
permission is required to update your catalog.
To use the
Catalog Batch API
, you need the appropriate
Marketing API Access Level
and must accept the
Terms of Service
by creating your first catalog through
Business Manager
. See
Catalog Reference
.
Step 1: Set up your catalog feed
Set up your catalog feed using the
supported feed formats
. See also
supported feed formats
, including
Google Sheets
and
feed format to schedule feed fetches
.
Add inventory to your catalog with a set of
universal attributes
, then add
recommended attributes
or
additional attributes
that are specific to the category of your items. See also
supported fields for Advantage+ catalog ads
.
To set up your catalog for localized shopping with multiple languages and countries, see
Localized Catalog Setup
,
Localized Catalog for Advantage+ Catalog Ads
, and
Localized Catalog for Instagram Shopping
. See also
localized catalog supported fields
.
Learn more about
how to use catalog fields
.
Step 2: Choose a product category
Provide
at least one category
for your items to help customers understand what type of item you’re selling:
Google Product Category
Facebook Product Category
If you use onsite checkout, one of these category types is required.
Step 3: Schedule your feed upload
See
Schedule your feed uploads
. For localized catalogs, see
Upload your feeds via the API
.
Learn More
About Catalog
Catalogs, Ads Help Center
How to Use Catalog Fields, Commerce
Supported Fields, Catalog
Universal Attributes
Create a Data Feed File for Catalog Items
Data Feed Specifications for Catalogs
Google product category for catalog items
Prepare and Set Up Catalog for Advantage+ Catalog Ads, Blueprint
Live Training: Troubleshoot Catalog for Advantage+ Catalog Ads, Blueprint
About Checkout
About Checkout on Facebook and Instagram
Checkout on Facebook and Instagram
Best Practices and Policies
Best Practices, Commerce Catalog
FAQs: Advantage+ Catalog Ads
Purchase Protection policies and requirements
Google's product taxonomy
Tax calculations

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/scheduled-feeds:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Schedule Data Feed Uploads
Use this guide to upload and schedule your feed.
Upload Your Feed
To upload a feed, you need
catalog_management
permission. See
Marketing API, Permissions
. After you create a catalog, use
catalog id
to create and schedule a
Product Feed
:
cURL
Node.js SDK
PHP SDK
Python SDK
Java SDK
Ruby SDK
curl -X POST \
  -F 'name="Test Feed"' \
  -F 'schedule={
       "interval": "DAILY",
       "url": "http://www.example.com/sample_feed.tsv",
       "hour": "22"
     }' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/v22.0/{product-catalog-id}/product_feeds
Open In Graph API Explorer
'use strict';
const bizSdk = require('facebook-nodejs-business-sdk');
const ProductCatalog = bizSdk.ProductCatalog;
const ProductFeed = bizSdk.ProductFeed;

const access_token = '<ACCESS_TOKEN>';
const app_secret = '<APP_SECRET>';
const app_id = '<APP_ID>';
const id = '<PRODUCT_CATALOG_ID>';
const api = bizSdk.FacebookAdsApi.init(access_token);
const showDebugingInfo = true; // Setting this to true shows more debugging info.
if (showDebugingInfo) {
  api.setDebug(true);
}

const logApiCallResult = (apiCallName, data) => {
  console.log(apiCallName);
  if (showDebugingInfo) {
    console.log('Data:' + JSON.stringify(data));
  }
};

let fields, params;
fields = [
];
params = {
  'name' : 'Test Feed',
  'schedule' : {'interval':'DAILY','url':'http://www.example.com/sample_feed.tsv','hour':'22'},
};
const product_feeds = (new ProductCatalog(id)).createProductFeed(
  fields,
  params
);
logApiCallResult('product_feeds api call complete.', product_feeds);
Open In Graph API Explorer
require __DIR__ . '/vendor/autoload.php';

use FacebookAds\Object\ProductCatalog;
use FacebookAds\Object\ProductFeed;
use FacebookAds\Api;
use FacebookAds\Logger\CurlLogger;

$access_token = '<ACCESS_TOKEN>';
$app_secret = '<APP_SECRET>';
$app_id = '<APP_ID>';
$id = '<PRODUCT_CATALOG_ID>';

$api = Api::init($app_id, $app_secret, $access_token);
$api->setLogger(new CurlLogger());

$fields = array(
);
$params = array(
  'name' => 'Test Feed',
  'schedule' => array('interval' => 'DAILY','url' => 'http://www.example.com/sample_feed.tsv','hour' => '22'),
);
echo json_encode((new ProductCatalog($id))->createProductFeed(
  $fields,
  $params
)->exportAllData(), JSON_PRETTY_PRINT);
Open In Graph API Explorer
View on GitHub
from facebook_business.adobjects.productcatalog import ProductCatalog
from facebook_business.adobjects.productfeed import ProductFeed
from facebook_business.api import FacebookAdsApi

access_token = '<ACCESS_TOKEN>'
app_secret = '<APP_SECRET>'
app_id = '<APP_ID>'
id = '<PRODUCT_CATALOG_ID>'
FacebookAdsApi.init(access_token=access_token)

fields = [
]
params = {
  'name': 'Test Feed',
  'schedule': {'interval':'DAILY','url':'http://www.example.com/sample_feed.tsv','hour':'22'},
}
print ProductCatalog(id).create_product_feed(
  fields=fields,
  params=params,
)
Open In Graph API Explorer
View on GitHub
import com.facebook.ads.sdk.*;
import java.io.File;
import java.util.Arrays;

public class SAMPLE_CODE_EXAMPLE {
  public static void main (String args[]) throws APIException {

    String access_token = \"<ACCESS_TOKEN>\";
    String app_secret = \"<APP_SECRET>\";
    String app_id = \"<APP_ID>\";
    String id = \"<PRODUCT_CATALOG_ID>\";
    APIContext context = new APIContext(access_token).enableDebug(true);

    new ProductCatalog(id, context).createProductFeed()
      .setName(\"Test Feed\")
      .setSchedule(\"{\\"interval\\":\\"DAILY\\",\\"url\\":\\"http://www.example.com/sample_feed.tsv\\",\\"hour\\":\\"22\\"}\")
      .execute();

  }
}
Open In Graph API Explorer
View on GitHub
require 'facebook_ads'

access_token = '<ACCESS_TOKEN>'
app_secret = '<APP_SECRET>'
app_id = '<APP_ID>'
id = '<PRODUCT_CATALOG_ID>'

FacebookAds.configure do |config|
  config.access_token = access_token
  config.app_secret = app_secret
end

product_catalog = FacebookAds::ProductCatalog.get(id)
product_feeds = product_catalog.product_feeds.create({
    name: 'Test Feed',
    schedule: {'interval':'DAILY','url':'http://www.example.com/sample_feed.tsv','hour':'22'},
})
Open In Graph API Explorer
View on GitHub
Give Feedback
The
schedule
parameter enables you to schedule your feed upload. Options include
interval
,
url
,
hour
. It can also include
day_of_week
,
minute
,
username
, and
password
.
Note
: For
username
and
password
, we support basic auth on HTTP and FTP.
Example
— Schedule Your Feed Upload
schedule: {"day_of_week":"FRIDAY","hour":17,"interval_count":1,"interval":"DAILY","minute":42,"next_scheduled_upload_time":"","password":pwd123,"status":"active","timezone":"Atlantic/Canary","url":"https://www.abc.com","username":aname}
Update an Individual Item
Update an individual item's data in real time. Include the updated fields in an
HTTP POST
, where
retailer_id
is the item ID from your feed. It must be base64url-encoded.
https://graph.facebook.com/catalog:{CATALOG_ID}:{base64urlencode(retailer_id)}
See mutable fields in
Products, Reference
.
Do not provide item feeds with individual item updates, creation, or deletion with the API.
This can disrupt any updates or deletes of items you created with the API because we don't track these with the feed.
Schedule Data Feed Fetches
Scheduled feeds don't support uploads more frequently than once per hour.  If you need to update inventory faster, we recommend to use the
Direct Upload API
.
If you're using our API to create and manage your feeds, you need to send us an API request with details for the update schedule you want to create:
curl \
  -F 'name=Test Feed' \
  -F 'update_schedule={ 
    "interval": "HOURLY", 
    "url": "http:\/\/www.example.com\/sample_feed_updates.tsv",
    "hour": 22
  }' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
We fetch item feeds from your system on a schedule you define. There are two types of schedules you can define:
update_schedule
— The uploads create new items or update existing ones with the information provided in the data feed file.
schedule
— The uploads result in a complete refresh operation on your data feed. We delete items not present in the file, update existing ones, and create new ones. You can use either of the schedules, or both, depending on your needs.
For example:
update_schedule
with frequency
HOURLY
and a replace
schedule
with frequency
DAILY
.
We recommend setting up an
update_schedule
with only changed data in the data feed file for faster processing of feed. This is particularly better for holiday sales and faster price and availability updates. It's also recommended to mark items as "out of stock" rather than deleting from the feed so that we can retarget the user with similar available items.
curl \
  -F 'name=Test Feed' \
  -F 'schedule={ 
    "interval": "DAILY", 
    "url": "http:\/\/www.example.com\/sample_feed.tsv"
  }' \
  -F 'update_schedule={ 
    "interval": "HOURLY", 
    "url": "http:\/\/www.example.com\/sample_feed_updates.tsv",
    "hour": 22
  }' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Response:
{ "id" : {FEED_ID} }
See
Data Feed Reference
,
Data Feed Schedule Reference
.
Learn More
Feed API, Commerce
Perform One-Time Direct Upload
Manual Product Feed Uploads, Reference
Product Feed Upload Errors, Reference
Request a Data Feed Upload Error Report
Get the Error Report Status
Fix Feed Upload Errors with Rules
Troubleshoot Your Data Feed, Support
Prepare and Set Up Catalog for Advantage+ Catalog Ads, Blueprint
Live Training on Catalog, Blueprint
Scheduled Feeds Using Google Sheets

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/localized-catalog/:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Localized Catalogs
Overview
Your
catalog
is an object (or container) of information about your products where you upload your inventory.
Meta provides localized catalog functionality, enabling you to set up your product catalog to show items in ads or shops for items in different countries. Localizing the currency, the price, and the translated name or description are common cases. You can also give a localized product URL to navigate the customer to your country or language-specific product website
How it Works
Set up your localize catalog, general
Set up your localized catalog for Advantage+ catalog ads
Set up your localized catalog for Instagram Shopping
Best Practices
Make sure that product images satisfy catalog
requirements
.
Make sure that product titles satisfy catalog
requirements
.
Make sure that product descriptions satisfy catalog
requirements
.
Learn More
For full details, see Ads Help Center —
Set Up a Catalog for Multiple Languages and Countries
Add Product Tags in Instagram Posts
Localized Catalog for Instagram Shopping
Create an Advantage+ Catalog Ad for Multiple Languages and Countries, Ads Help Center
Build a Creative Template
Product Catalog, Marketing API
Scheduled Feeds, Catalog
Supported Fields for Advantage+ Catalog Ads
Advantage+ Catalog Ads - Create Ads

Content from https://developers.facebook.com/docs/marketing-api/catalog/support:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Troubleshoot Your Data Feed
Use these solutions and guidelines for any data feed issues you might encounter.
View Suggested Rules
To list all rules associated with a data feed, make an
HTTP GET
call to:
https://graph.facebook.com/<API_VERSION>/<PRODUCT_FEED_ID>/rules
For details, see
Product Data Feed Rules API, Reference
.
You can get suggested rules from Meta to fix errors in your data feed. To see suggested rules for your upload session, follow these steps:
Step 1
: Retrieve upload sessions:
https://graph.facebook.com/<API_VERSION>/<PRODUCT_FEED_ID>/uploads
Step 2
: Retrieve errors for upload session:
https://graph.facebook.com/<API_VERSION>/<UPLOAD_SESSION_ID>/errors
Step 3
: Retrieve suggested rules for upload error:
curl -i -X GET 
 "https://graph.facebook.com/<API_VERSION>/<UPLOAD_ERROR_ID>/suggested_rules?access_token={ACCESS_TOKEN}
Sample Response
"data": [
  
    "attribute": "description",
    "type": "letter_case_rule",
    "params": [
      
        "key": "type",
        "value": "capitalize_first"
      
    ]
  
]
For details, see
Suggested Rules API, Reference
.
Apply Rules to Data Feeds
To apply rules to a data feed, you need to associate the rule to the data feed.
Make an
HTTP POST
call to:
https://graph.facebook.com/<API_VERSION>/<PRODUCT_FEED_ID>/rules?attribute={ATTRIBUTE}&amp;rule_type={RULE_TYPE}&amp;params={PARAMS}
Example
curl -i -X POST 
  -d "attribute=google_product_category" 
  -d "rule_type=mapping_rule" 
  -d "params=%7B'map_from'%3A%20'gcategory'%7D" 
  -d "access_token={ACCESS_TOKEN}" 
  "https://graph.facebook.com/<API_VERSION>/{PRODUCT_FEED_ID}/rules"
Sample Response
"id": "{RULE_ID}"
Format
params
as follows:
Rule Type
Format
Example
Notes
Mapping Rule
"map_from": <string>
"map_from": "gavailability"
Value Mapping Rule
<string> : <string>
"InStock": "in stock"
Maximum number of mappings is limited to 10 and length of strings to 20.
Letter Case Rule
"type": one of : "capitalize_first", "capitalize_all", "to_upper", "to_lower"
"type": "capitalize_first"
For details, see
Product Data Feed Rules API, Reference
.
Fix Feed Upload Errors with Rules
Fix and prevent ongoing data feed upload errors with rules. You can provide rules that Meta applies to each data feed upload. Specify your rules by the attribute (column) they should apply to, by the type of rule, and by parameters.
You currently cannot use rules with the Batch API.
You can provide these types of rules:
Mapping Rule
- Maps attributes (column names) in a data feed file to attributes we can recognize.
Value Mapping Rule
- Maps fields (column values) in a data feed file to fields we can recognize.
Letter Case Rule
- Change case of words in a field. For example, change all uppercase descriptions to lower case.
For example, you can fix these issues with the
Mapping and Value Mapping Rule
:
Attribute typos from
gavailability
to
availability
Fix unrecognized enums
InStock
to
in stock
Price format from
45$
to
45.00 USD
Translate Condition:
Neu
under Condition:
New
You can use the
Letter Case Rule
to address these types of issues:
Change descriptions in all caps
BRAND NEW WITH LEATHER DETAIL...
to
Brand new with leather detail...
Fix titles in all caps
FACEBOOK T-SHIRT
to
Facebook T-shirt
Update and Delete Rules
To change a rule associated with a data feed, make an
HTTP POST
call to update any parameters and
HTTP DELETE
to delete it.
You can only update parameters. If you want to change
attribute
or
rule_type
, you must delete and re-create the rule.
https://graph.facebook.com/<API_VERSION>/<PRODUCT_FEED_RULE_ID>?params={PARAMS}
For details, See
Product Data Feed Rule API, Reference
.
Fix Missing Items in a Catalog
If Commerce Manager reports that some items in your catalog are missing or can't be found, you may need to check that your Meta pixel or app have been set up properly. You may encounter this error when:
The
content_id
included in your pixel or app event doesn't match the ID in the catalog's data feed.
The pixel or app isn't associated to the catalog.
The item doesn't exist in the catalog.
Learn more
here
.
Learn more about troubleshooting your feed with
Blueprint
.
Request a Data Feed Upload Error Report
Advantage+ Catalog Ads
You can use the Data Feed Upload Error Report API to request a full error report for any feed upload session. Once we receive the request, we run a background job to prepare these errors and store them in a CSV file.
To request a full error report, use
POST /{upload_session_id}/error_report
.
The report contains information about:
Retailer ID of the item that had an error
Error message
Error severity (
FATAL
if the error caused item to be rejected,
WARNING
if item was uploaded but with an error)
Field names on which this error was thrown
Capabilities that are being affected by this error; for example, errors affecting Advantage+ catalog ads that contain
'da'
within this column
If the error blocks capability (
true
/
false
); for example, if the error prevents the item from being shown on this surface
Request
curl -i -X POST \
  -F 'access_token=ACCESS_TOKEN' \
  https://graph.intern.facebook.com/<API_VERSION>/<upload session ID>/error_report
Response
The response indicates if the request was successful or not:
{
  "success": bool,
}
Commerce
Getting a sampling of errors and warnings is often sufficient to fix most product feed upload issues. However, you may need the full list of errors to do deeper analysis. To download a full list of errors and warnings, you must first query the most recent upload session (see section above).
You can request the full error report to be generated for a given upload session ID.
Request
GET https://graph.facebook.com/vX.X/{upload-session-id}/?fields=error_report
Response
{
  "error_report": {
    "report_status": "WRITE_FINISHED",
    "file_handle": "{link-to-the-file-location}"
  },
  "id": "493476498092860"
}
You should find a URL that you can download (for example, with wget, curl, and so on). The downloaded file will contain the full error report.
If you get this error: "Cannot access an object not managed by the business owning this app", please make sure that the app you're using belongs to the business (
Business Settings
>
Account
>
Apps
).
In case the report is not ready, repeat the last call after a few seconds. You can then download the report itself.
Get the Error Report Status
Once a report has been requested, use
GET /{upload_session_id}?fields=error_report
to get the status of the error report.
Example
curl -i -X GET \
 https://graph.intern.facebook.com/<API_VERSION>/<upload session ID>?fields=error_report&access_token=ACCESS_TOKEN
Response
{
  "error_report": {
    "report_status": string,
    "file_handle": string, // if available
  }
  "id": "332552650711532 (https://developers.intern.facebook.com/tools/explorer/690422434302374?method=GET&path=332552650711532%3Ffields%3Derror_report&version=v3.2#)"
}
Possible Values - Returned Status
Value
Description
NOT_REQUESTED
The error report for this data feed upload has not been requested.
REQUESTED
The request was received and is being processed.
CREATED
The report creation was successful and is waiting to be written to a CSV file.
WRITE_FINISHED
The report file has been prepared and is ready to be downloaded.
SESSION_DATA_NOT_FOUND
There was no data found for this data feed upload session, it is likely that there were no items processed for this feed upload.
ERROR_REPORT_OUTDATED
The error report is older than 30 days and is no longer available.
FATAL_ERROR
Something went wrong on our end while trying to prepare this error report. You can request for an error report to retry.
Note
: A CDN URL using this error report can be downloaded and will be returned as “file_handle” when the status of the
error_report
is
WRITE_FINISHED
.
Manage Product Feed Upload Errors
Advantage+ Catalog Ads
Read the
Product Feed Upload Errors documentation
. See also
Handling Product Feed Upload Errors, Commerce Platform
.
Request
To get errors and warning from a feed upload, you must first query for recent upload sessions.
GET https://graph.facebook.com/vX.X/{product-feed-id}/uploads
Token: PAGE_ACCESS_TOKEN
Then, use
upload_session_id
to retrieve errors and warnings.
GET https://graph.facebook.com/vX.X/{upload-session-id}/errors
Token: PAGE_ACCESS_TOKEN
Sample Response
A
fatal
severity here means the item cannot be ingested by Meta; a
warning
severity means some recommended attributes are missing or malformed.
{
  "data": [
    {
      "id": 1510567479166488,
      "summary": "A required field is missing: price.",
      "description": "Products need to have prices to run in ads. Include a price for each product in your data feed file and upload it again. Prices must include cost and an ISO currency code (for example: 10 USD instead of $10 for American dollars).",
      "severity": "fatal",
      "samples": {
        "data": [
          {
            "row_number": 2,
            "retailer_id": "yj9bpbpub5t8t22kgbq6",
            "id": "1677559492523068"
          },
          {
            "row_number": 5,
            "retailer_id": "ujn33tvbyv2vmdpo7ecb",
            "id": "1529743440653137"
          }
        ]
      }
    },
    {
      "id": 275241589314958,
      "summary": "GTIN is incorrectly formatted",
      "description": "Check that the GTIN (Global Trade Identification Number) for each of your products is in the correct format. Accepted types include UPC, EAN, JAN, and ISBN.",
      "severity": "warning",
      "samples": {
        "data": [
          {
            "row_number": 4,
            "retailer_id": "bxwb1pho9o43uxjxikcg",
            "id": "538700559625644"
          }
        ]
      }
    }
  ]
}
Commerce
Read the
Product Feed Upload Errors documentation
. See also
how to manage product feed Upload Errors, Advantage+ Catalog Ads
.
We recommend that you check catalog upload errors and warnings after each upload session. You can achieve this by going to the
Diagnostics
section of your
Commerce Manager
, or use the Feed API to request a sampling of errors and warnings. Start by first querying for recent upload sessions.
Learn more about resolving Diagnostic warnings and errors in Commerce Manager with
Blueprint
.
Request
GET https://graph.facebook.com/vX.X/{product-feed-id}/uploads
Sample Response
{
  "data": [
    {
      "id": "493476498092860",
      "start_time": "2019-07-15T12:38:36+0000",
      "end_time": "2019-07-15T12:38:47+0000"
    }
  ]
}
Then, use the value returned in the
id
field to retrieve
a sampling
of errors and warnings.
Request
GET https://graph.facebook.com/vX.X/{upload-session-id}/errors
Sample Response
A
fatal
severity here means the item cannot be ingested by Meta; a
warning
severity means some recommended attributes are missing or malformed.
{
  "data": [
    {
      "id": 1510567479166488,
      "summary": "A required field is missing: price.",
      "description": "Products need to have prices to run in ads. Include a price for each product in your data feed file and upload it again. Prices must include cost and an ISO currency code (for example: 10 USD instead of $10 for American dollars).",
      "severity": "fatal",
      "samples": {
        "data": [
          {
            "row_number": 2,
            "retailer_id": "yj9bpbpub5t8t22kgbq6",
            "id": "1677559492523068"
          },
          {
            "row_number": 5,
            "retailer_id": "ujn33tvbyv2vmdpo7ecb",
            "id": "1529743440653137"
          }
        ]
      }
    },
    {
      "id": 275241589314958,
      "summary": "GTIN is incorrectly formatted",
      "description": "Check that the GTIN (Global Trade Identification Number) for each of your products is in the correct format. Accepted types include UPC, EAN, JAN, and ISBN.",
      "severity": "warning",
      "samples": {
        "data": [
          {
            "row_number": 4,
            "retailer_id": "bxwb1pho9o43uxjxikcg",
            "id": "538700559625644"
          }
        ]
      }
    }
  ]
}
Learn More
Troubleshoot Data Feeds, Ads Help Center
Catalog and Signals Quality
Data Feed Fields and Specifications for Catalogs, Ads Help Center
Catalog and Signals Quality
Catalog Batch API, Advantage+ Catalog Ada
Catalog Batch API, commerce
Data Feed, Reference
Data Feeds in Catalog, Reference
Feed API, Reference
Scheduled Data Feed Fetch, Reference
Filter Rules, Reference
Product Catalog Batch, Reference
Product Catalog Items Batch, Reference
Product Catalog Check Batch Request Status, Reference
Product Feed Schedule, Reference
Product Feed Upload, Reference
Product Item, Reference
Product Search in Catalog, Reference
Live Training on Catalog, Blueprint

Content from https://developers.facebook.com/docs/marketing-api/catalog/get-started:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Get Started
This guide explains how to enhance your catalog and maximize discoverability and distribution of your items.
Before You Start
Before you start, please review these recommendations and guidelines:
If you manage multiple catalogs for different businesses or want an agency to access your catalogs, you may need to set up
Business Manager
.
The
catalog_management
permission grants your app the ability to create, read, update, and delete business-owned product catalogs of which the user is an admin. This permission grants access to related endpoints. By default, your app may only have access to product catalogs that are owned by admins and developers of the app when in developer mode. See
Catalog Management Reference
.
For a commerce catalog, before buyers can purchase items from you, you'll need to upload your products information into a
catalog
. Learn how to create a new ecommerce catalog using the
Commerce Manager
.
The
business_management
permission is required to update your catalog.
To use the
Catalog Batch API
, you need the appropriate
Marketing API Access Level
and must accept the
Terms of Service
by creating your first catalog through
Business Manager
. See
Catalog Reference
.
Step 1: Set up your catalog feed
Set up your catalog feed using the
supported feed formats
. See also
supported feed formats
, including
Google Sheets
and
feed format to schedule feed fetches
.
Add inventory to your catalog with a set of
universal attributes
, then add
recommended attributes
or
additional attributes
that are specific to the category of your items. See also
supported fields for Advantage+ catalog ads
.
To set up your catalog for localized shopping with multiple languages and countries, see
Localized Catalog Setup
,
Localized Catalog for Advantage+ Catalog Ads
, and
Localized Catalog for Instagram Shopping
. See also
localized catalog supported fields
.
Learn more about
how to use catalog fields
.
Step 2: Choose a product category
Provide
at least one category
for your items to help customers understand what type of item you’re selling:
Google Product Category
Facebook Product Category
If you use onsite checkout, one of these category types is required.
Step 3: Schedule your feed upload
See
Schedule your feed uploads
. For localized catalogs, see
Upload your feeds via the API
.
Learn More
About Catalog
Catalogs, Ads Help Center
How to Use Catalog Fields, Commerce
Supported Fields, Catalog
Universal Attributes
Create a Data Feed File for Catalog Items
Data Feed Specifications for Catalogs
Google product category for catalog items
Prepare and Set Up Catalog for Advantage+ Catalog Ads, Blueprint
Live Training: Troubleshoot Catalog for Advantage+ Catalog Ads, Blueprint
About Checkout
About Checkout on Facebook and Instagram
Checkout on Facebook and Instagram
Best Practices and Policies
Best Practices, Commerce Catalog
FAQs: Advantage+ Catalog Ads
Purchase Protection policies and requirements
Google's product taxonomy
Tax calculations

Content from https://developers.facebook.com/docs/marketing-api/catalog/overview:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Catalog
Before buyers can purchase items from you, you'll need to upload your product information into a Facebook
catalog
. If you advertise with Facebook Dynamic Product ads, you already have a catalog and should augment your existing catalog. If you do not have a catalog or do not want to reuse an existing one, you can create a new E-Commerce catalog using the
Commerce Manager
.
Catalogs are managed within your Meta
Business Manager
. Your Marketing department may already have set up a Business on Facebook to manage their Ads campaigns on behalf of your organization and should be able to provide you access. If you do not have a Business Manager on Facebook, you can create one now by following the instructions from our
Help Center
.
Manage Catalogs
Products are created, updated, and deleted using the following approaches:
In bulk by uploading a Product Feed file, manually or scheduled in Commerce Manager
For existing products:
Update product
quantity_to_sell_on_facebook
(the field representing inventory count) using the Catalog
Product Catalog Items Batch API
In bulk by uploading a
Supplementary Feed
manually, scheduled in Commerce Manager, or by using the
Product Feed API
.
The product feed (inventory) should be provided in one of the supported formats (CSV, TSV, RSS XML, ATOM XML, as well as
Google Sheets
.
Learn more about how to manage your catalog and the field requirements in our inventory documentation
.
Product Attributes
A catalog is a structured data file that holds information about the items in your inventory. Each row in your catalog represents an individual product (unique size/color variant). Each column in your catalog represents product attributes such as title, description and image You can see the full list of attributes and their requirements
here
.
id
title
gender
size
color
inventory
price
item_group_id
0475-S
T-Shirt
Unisex
S
Black
35
7.43
0475
0475-M
T-Shirt
Unisex
M
Black
125
7.43
0475
0475-L
T-Shirt
Unisex
L
Black
12
7.43
0475
0883
Shorts
Unisex
3
26.55
0883
Product Data Sources
There are multiple ways to populate your catalog. The most common approach is to list all your products and attributes into a flat file using one of the supported formats (CSV, TSV, RSS XML, ATOM XML, as well as
Google Sheets
, and upload it as a catalog Feed.
After you've created your catalog, you can create one or many Product Feeds to update or replace product items in your catalog. Product Feeds can be uploaded manually or automatically using a schedule (hourly, daily or weekly). Two types of schedules are supported for a given Product Feed:
Replace Schedule
: to refresh your entire feed. Items not present in the feed file will be deleted.
Update Schedule
: to make changes to selected items in your feed.
Most businesses will set-up a
Replace Schedule
once a day, and configure an
Update Schedule
more frequently to make incremental catalog updates.
A catalog supports one or multiple Product Feeds. However, a given product (identified by the
id
field) can only exist in one Product Feed at any time (product IDs are unique to feeds).
Read more about how to set-up your Product Feed in the
Catalog Set-Up
section.
Real-time Updates
In addition to manual or scheduled uploads, we support live updates of specific product fields using the catalog
Batch API
for near real-time updates. This approach is programmatic, and mostly used to update stock-related information for fast-selling product items.
If you have a fast-selling inventory and feel that the hourly update cadence of Product Feeds is insufficient for your particular case, you can de-couple updating general product attributes from volatile fields such as
inventory
and
availability
. Read more about the different
inventory update strategies
currently supported.
Diagnostics
Because Product Feed and batch uploads are both asynchronous operations, there may be situations where one or many products fail to be updated without you knowing it. Errors may be caused by various reasons such as missing or incorrect product attributes in your data source. It is important to regularly check the status of your Product Feed upload or batch sessions, and fix any potential errors.
You can check for upload errors using two different approaches:
Manually
: regularly check the Diagnostics view of your catalog. This view will show warnings and errors for each Product Feed upload sessions. You can also download error reports for offline analysis.
Programmatically
: build an API integration to automatically report warning and errors based on your Product Feed upload sessions. Read the
Handling Product Feed errors
section in the
Feed API
for more information.
Diagnostics for Product Item Errors
Whether they are uploaded using product feed or batch sessions, once product items have been ingested, there could be important visibility or checkout blocking issues that come up during validations that are run on a regular basis. You can check for those errors in two ways:
Manually
: you can check individual products in the ‘Items’ section in your Product Catalog. You will find any errors with a product under the ‘Issues’ tab of that product item.
Programmatically
: you can automatically check any errors in two ways:
Product Item API
: For each uploaded product item id, the
Product Item
API can be used to retrieve all non-fatal errors associated with it (Note that fatal errors would have prevented the ingestion from happening). The errors field in the
Product Item
API contains a list of errors associated with the item.
Product Search API
: The list of affected product items can be requested via the
Product Search
API. In the parameters, you  need to add ‘errors’ to the field list to see the list of errors affecting each item and filter by either error type or error priority to fetch only items affected matching those filters.
Catalog All Errors
You may want to fetch the list of all the possible errors with product items. The
Catalog All Errors
API will help to fetch the list of all possible errors. You may use this list as reference for different error types and use these error types to filter errors in other diagnostic APIs as described above.
Product Catalog Diagnostics
You may want to fetch the list of all the possible errors associated with the product set or catalog. The
Product Catalog Diagnostics API
will help to fetch the list of all possible errors with counters. You may use this list as reference for different error types and use these error types to filter errors in other diagnostic APIs as described above.
Next Steps
Learn more about the
supported catalog fields
that describe the type or category of commerce products in your listing.
Learn more about the
universal basic attributes
to use in your product feed.
Learn more about the
product categories
to use to enhance your catalog.

Content from https://developers.facebook.com/docs/marketing-api/catalog/localized-catalog/localized-catalog-setup:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Localized Catalog Setup
Use this guide to set up your catalog for localization. See also how to
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
.
Requirements
You must create a language or country
override data feed
that will contain only the fields (with values) you wish to change.
You must include an
id
field in your
override data feed
. The
id
for each item must match an
id
in one of your main catalog data feeds and/or the content ID from your pixel.
You must include an
override
field.
For a country override feed, enter the ISO codes of the countries for which you want to provide localized information. The value in the 'override' column should be a
supported ISO country code
. (see also
standard ISO country codes
.)
For a language override feed, enter the ISO codes of the languages for which you want to provide localized information. The value in the
override
column should be a
supported ISO language code
. (see also
standard ISO language codes
.)
You can only localize (override) specific fields, not all of them. See
Supported Fields — Localized Catalogs
for a list of supported catalog fields.
Make sure that product images satisfy catalog
requirements
.
Make sure that product titles satisfy catalog
requirements
.
Make sure that product descriptions satisfy catalog
requirements
.
Recommendations
As you plan your catalog setup, we ask that you follow these recommendations:
Although you can include multiple languages in a language feed and multiple countries in a country feed, we recommend that you create your country and language feeds separately.
If you have a large catalog (over 100k items), you must create one data feed per language or country.
If you are creating a language feed and a country feed, we recommend that the fields included in each feed be unique to that feed type. For example, do not specify product name in both the language feed and the country feed
For products (ecommerce), we recommend that you include
title
and
description
in your
language feed
and include
price
,
sale_price
,
sale_price_effective_date
,
availability
, and
link
in your
country feed
.
As examples, we provide a
language override template
and a
country override template
.
See also
Supported Fields — Localized Catalogs
Feed Formats - Country and Language
Supported Feed Formats and CSV templates - Catalog
Step 1: Create Language and Country Feeds
Feed Types
You can provide localized properties for your catalog items, using additional types of feeds.
Feed Type
Description
Example
Country Feed
Contains overrides for specified countries. You can create and upload country feeds using the Commerce Manager or
via the API
.
See
supported feed format
.
An item can have different prices in different countries.
Language Feed
Contains translations for specific fields. You can create and upload language feeds using the Commerce Manager or
via the API
. See
supported feed format
.
An item can have different descriptions in different languages.
Language and Country Feed
Intended for advanced use cases where a country feed or language feed is not enough to describe the localization of your items. A language and country feed should only be used for fields that are absolutely necessary.
You can only create a language and country feed via the API, but you can modify and upload the feed from the Commerce Manager or
via the API
. The Commerce Manager provides details about each country and language setup.
Note
: To localize a field for both language and country, the value in the
override
column should be a
supported ISO language code
and a
supported ISO country code
, separated by a '|' character, for example,
en_XX|US
Your product URLs may depend on both the viewer language and country.
For example: http://www.mysite.com/ca/item12345?lang=fr
Or
http://www.mysite.com/ca/fr/item12345
You can define localized fields for a limit of 350 language and country pairs, per catalog item.
Feed Formats
Country Feed
Example CSV
— This feed contains country localizations for the United Kingdom (
GB
) and Italy (
IT
).
id; override; price; link; delete
FB_product_1234; GB; 9.00 GBP; http://www.example.com/en_GB/FB_product_1234; false
FB_product_1234; IT; 10.49 EUR; http://www.example.com/it_IT/FB_product_1234; false
price
,
sale_price
,
unit_price
,
base_price
,
status
(visibility), and
availability
must only be provided in a country feed. These fields cannot be provided in a language feed. This helps ensure customers see the correct localized product data.
Language Feed
Example CSV
— This feed contains language localizations for French (
fr_XX
) and English (
en_XX
).
id; override; description; title; delete
FB_product_1234; fr_XX; Le t-shirt American Apparel préféré de tous. Le t-shirt comporte une encolure ajustée de 3/4 pouce au cou, une bande épaule à épaule et un ourlet de 1 pouce sur les manches.; T-shirt Unisexe d'American Apparel; false
FB_product_1234; en_XX ; Everyone's favorite American Apparel T-shirt. The t-shirt features 3/4 inches set-in neck, shoulder to shoulder tape and 1 inch hem on sleeves.; American Apparel Unisex T-Shirt; false
Language and Country Feed
Example
- This feed contains 'language and country' localizations for French speakers in the U.S. (
fr_XX|US
) and French speakers in Canada (
fr_XX|CA
).
id; override; url; delete
FB_product_1234; fr_XX|US; http://us.example.com/fr/product_1234; false
FB_product_1234; fr_XX|CA; http://ca.example.com/fr/product_1234; false
Step 2: Check Your Feed - Order of Precedence
When selecting which localized information to show to a user, we check the feed contents in this order:
Language and country feed values for the user's spoken languages and home country
Language feed values for the user's spoken languages
Country feed values for user's home country
Step 3: Upload Language and Country Feeds
Once you created your feeds, you can choose to upload them manually via Commerce Manager or via the API, as shown below.
Upload the Feeds via the API
Make your feeds available on your server.
Link the feeds to your catalog, using an additional
override_type
parameter.
Language Feed
Example
- Upload a Language Feed
curl \
  -F 'name=Language feed' \
  -F 'schedule={
    "interval": "DAILY",
    "url": "http:\/\/www.example.com\/sample_language_feed.tsv",
    "hour": 22
  }' \
	-F 'override_type=language'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Country Feed
Example
— Upload a Country Feed
curl \
  -F 'name=Country Feed' \
  -F 'schedule={
    "interval": "DAILY",
    "url": "http:\/\/www.example.com\/sample_country_feed.tsv",
    "hour": 22
  }' \
	-F 'override_type=country'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Language and Country Feed
Example
- Upload the language and country feed
curl \
  -F 'name=language and country Feed' \
  -F 'schedule={
        "interval": "DAILY",
        "url": "http:\/\/www.example.com\/sample_language_and_country_feed.tsv",
        "hour": 22
      }' \
  -F 'override_type=language_and_country'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Parameters
Parameter
Value
url
Location where we can retrieve the feed file from
interval
Frequency at which we fetch the feed file
hour
Hour of the day (based on a 24-hr clock) when we fetch the feed
Step 4: Remove Country or Language Information for a Product (Optional)
To remove localized information from an item:
Specify a 'delete' column in your country or language feed.
Set the value to
true
.
The localization for that product is then removed.
Note
: You may also
delete
items in your main item feed. When you delete a main item,
all
overrides are removed.
Step 5: Verify Your Setup in Commerce Manager
Commerce Manager provides details about country and language fields information for each product in the
Items
>
Details
page.
You can also access the international coverage of your entire catalog in the
Items
tab >
International Coverage
.
Learn More
Ads Help Center
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Create a Advantage+ Catalog Ad for Multiple Languages and Countries, Ads Help Center
List of
supported languages and countries
List of
supported fields for localized catalogs
Instagram
Add Product Tags in Instagram Posts
Localized Catalog for Instagram Shopping
Marketing API - Catalog
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Localized Catalogs, list of supported fields
Build a Creative Template
Catalog, Marketing API
Schedule Feeds
Advantage+ Catalog Ads - Create Ads
Supported catalog fields
ISO Standards
ISO country codes
ISO language codes

Content from https://developers.facebook.com/docs/marketing-api/catalog/localized-catalog-setup:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Localized Catalog Setup
Use this guide to set up your catalog for localization. See also how to
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
.
Requirements
You must create a language or country
override data feed
that will contain only the fields (with values) you wish to change.
You must include an
id
field in your
override data feed
. The
id
for each item must match an
id
in one of your main catalog data feeds and/or the content ID from your pixel.
You must include an
override
field.
For a country override feed, enter the ISO codes of the countries for which you want to provide localized information. The value in the 'override' column should be a
supported ISO country code
. (see also
standard ISO country codes
.)
For a language override feed, enter the ISO codes of the languages for which you want to provide localized information. The value in the
override
column should be a
supported ISO language code
. (see also
standard ISO language codes
.)
You can only localize (override) specific fields, not all of them. See
Supported Fields — Localized Catalogs
for a list of supported catalog fields.
Make sure that product images satisfy catalog
requirements
.
Make sure that product titles satisfy catalog
requirements
.
Make sure that product descriptions satisfy catalog
requirements
.
Recommendations
As you plan your catalog setup, we ask that you follow these recommendations:
Although you can include multiple languages in a language feed and multiple countries in a country feed, we recommend that you create your country and language feeds separately.
If you have a large catalog (over 100k items), you must create one data feed per language or country.
If you are creating a language feed and a country feed, we recommend that the fields included in each feed be unique to that feed type. For example, do not specify product name in both the language feed and the country feed
For products (ecommerce), we recommend that you include
title
and
description
in your
language feed
and include
price
,
sale_price
,
sale_price_effective_date
,
availability
, and
link
in your
country feed
.
As examples, we provide a
language override template
and a
country override template
.
See also
Supported Fields — Localized Catalogs
Feed Formats - Country and Language
Supported Feed Formats and CSV templates - Catalog
Step 1: Create Language and Country Feeds
Feed Types
You can provide localized properties for your catalog items, using additional types of feeds.
Feed Type
Description
Example
Country Feed
Contains overrides for specified countries. You can create and upload country feeds using the Commerce Manager or
via the API
.
See
supported feed format
.
An item can have different prices in different countries.
Language Feed
Contains translations for specific fields. You can create and upload language feeds using the Commerce Manager or
via the API
. See
supported feed format
.
An item can have different descriptions in different languages.
Language and Country Feed
Intended for advanced use cases where a country feed or language feed is not enough to describe the localization of your items. A language and country feed should only be used for fields that are absolutely necessary.
You can only create a language and country feed via the API, but you can modify and upload the feed from the Commerce Manager or
via the API
. The Commerce Manager provides details about each country and language setup.
Note
: To localize a field for both language and country, the value in the
override
column should be a
supported ISO language code
and a
supported ISO country code
, separated by a '|' character, for example,
en_XX|US
Your product URLs may depend on both the viewer language and country.
For example: http://www.mysite.com/ca/item12345?lang=fr
Or
http://www.mysite.com/ca/fr/item12345
You can define localized fields for a limit of 350 language and country pairs, per catalog item.
Feed Formats
Country Feed
Example CSV
— This feed contains country localizations for the United Kingdom (
GB
) and Italy (
IT
).
id; override; price; link; delete
FB_product_1234; GB; 9.00 GBP; http://www.example.com/en_GB/FB_product_1234; false
FB_product_1234; IT; 10.49 EUR; http://www.example.com/it_IT/FB_product_1234; false
price
,
sale_price
,
unit_price
,
base_price
,
status
(visibility), and
availability
must only be provided in a country feed. These fields cannot be provided in a language feed. This helps ensure customers see the correct localized product data.
Language Feed
Example CSV
— This feed contains language localizations for French (
fr_XX
) and English (
en_XX
).
id; override; description; title; delete
FB_product_1234; fr_XX; Le t-shirt American Apparel préféré de tous. Le t-shirt comporte une encolure ajustée de 3/4 pouce au cou, une bande épaule à épaule et un ourlet de 1 pouce sur les manches.; T-shirt Unisexe d'American Apparel; false
FB_product_1234; en_XX ; Everyone's favorite American Apparel T-shirt. The t-shirt features 3/4 inches set-in neck, shoulder to shoulder tape and 1 inch hem on sleeves.; American Apparel Unisex T-Shirt; false
Language and Country Feed
Example
- This feed contains 'language and country' localizations for French speakers in the U.S. (
fr_XX|US
) and French speakers in Canada (
fr_XX|CA
).
id; override; url; delete
FB_product_1234; fr_XX|US; http://us.example.com/fr/product_1234; false
FB_product_1234; fr_XX|CA; http://ca.example.com/fr/product_1234; false
Step 2: Check Your Feed - Order of Precedence
When selecting which localized information to show to a user, we check the feed contents in this order:
Language and country feed values for the user's spoken languages and home country
Language feed values for the user's spoken languages
Country feed values for user's home country
Step 3: Upload Language and Country Feeds
Once you created your feeds, you can choose to upload them manually via Commerce Manager or via the API, as shown below.
Upload the Feeds via the API
Make your feeds available on your server.
Link the feeds to your catalog, using an additional
override_type
parameter.
Language Feed
Example
- Upload a Language Feed
curl \
  -F 'name=Language feed' \
  -F 'schedule={
    "interval": "DAILY",
    "url": "http:\/\/www.example.com\/sample_language_feed.tsv",
    "hour": 22
  }' \
	-F 'override_type=language'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Country Feed
Example
— Upload a Country Feed
curl \
  -F 'name=Country Feed' \
  -F 'schedule={
    "interval": "DAILY",
    "url": "http:\/\/www.example.com\/sample_country_feed.tsv",
    "hour": 22
  }' \
	-F 'override_type=country'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Language and Country Feed
Example
- Upload the language and country feed
curl \
  -F 'name=language and country Feed' \
  -F 'schedule={
        "interval": "DAILY",
        "url": "http:\/\/www.example.com\/sample_language_and_country_feed.tsv",
        "hour": 22
      }' \
  -F 'override_type=language_and_country'
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/<API_VERSION>/<CATALOG_ID>/product_feeds
Parameters
Parameter
Value
url
Location where we can retrieve the feed file from
interval
Frequency at which we fetch the feed file
hour
Hour of the day (based on a 24-hr clock) when we fetch the feed
Step 4: Remove Country or Language Information for a Product (Optional)
To remove localized information from an item:
Specify a 'delete' column in your country or language feed.
Set the value to
true
.
The localization for that product is then removed.
Note
: You may also
delete
items in your main item feed. When you delete a main item,
all
overrides are removed.
Step 5: Verify Your Setup in Commerce Manager
Commerce Manager provides details about country and language fields information for each product in the
Items
>
Details
page.
You can also access the international coverage of your entire catalog in the
Items
tab >
International Coverage
.
Learn More
Ads Help Center
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Create a Advantage+ Catalog Ad for Multiple Languages and Countries, Ads Help Center
List of
supported languages and countries
List of
supported fields for localized catalogs
Instagram
Add Product Tags in Instagram Posts
Localized Catalog for Instagram Shopping
Marketing API - Catalog
Set Up a Catalog for Multiple Languages and Countries, Ads Help Center
Localized Catalogs, list of supported fields
Build a Creative Template
Catalog, Marketing API
Schedule Feeds
Advantage+ Catalog Ads - Create Ads
Supported catalog fields
ISO Standards
ISO country codes
ISO language codes

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides/feed-api:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Feed API Reference
Items you want to sell on Facebook and Instagram are uploaded and managed using a
catalog
. For each catalog, a
data feed
should be provided in one of the
supported formats
(CSV, TSV, RSS XML, ATOM XML).
Note
, to supplement or modify existing catalog data without modifying the raw, underlying data source, use a
supplementary feed
. Supplementary feeds can only update items in a catalog; they cannot create or delete items.
Uploading Your Products
You can manually create a product catalog in the
Commerce Manager
, or programmatically. Upload or configure your products using the Product Feed API.
The product feed will be used as the source of truth for updating product catalogs on Facebook, and fetched by Facebook periodically according to the configured interval. You should store the product feed ID, and use it to get upload status, errors and to change upload schedule.
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X POST \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{PRODUCT_CATALOG_ID}/product_feeds
POST /{PRODUCT_CATALOG_ID}/product_feeds HTTP/1.1
Host: graph.facebook.com
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->post(
    '/{PRODUCT_CATALOG_ID}/product_feeds',
    array (),
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{PRODUCT_CATALOG_ID}/product_feeds",
    "POST",
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Request
Attribute
Type
Required
Description
name
string
Required
schedule
schedule
Required
The configuration for fetching a feed in a recurrent manner. See
schedule
object below
for more details.
update_only
bool
Optional
Default:
false
Note
, if value is set to
false
, the feed is treated as a replace feed. That means with every new incoming update, if we do not find the set of items created previously, they will be deleted.
When set to
true
, we create new items and update existing ones, but don't delete items from the feed. You only need to provide ID to update existing items. This reduces time to fetch and process your file.
ingestion_source_type
enum {PRIMARY_FEED, SUPPLEMENTARY_FEED}
Optional (Required for Supplementary Feeds)
See
Product Feed
documentation.
primary_feed_ids
list <numeric string>
Optional (Required for Supplementary Feeds)
See
Product Feed
documentation.
schedule
object
Read the
Product Feed Schedule specification
for more details.
Attribute
Type
Required
Description
url
string
Required
The location of the product feed to fetch.
interval
string
Required
The interval at which the product feed gets fetched.
hour
number
Optional
Hour of the day to fetch the product feed.
Scheduled feeds do not support uploads more frequently than once per hour.  If you need to update inventory faster, please use the
Catalog Batch API
.
Response
{
  "id": {PRODUCT_FEED_ID}
}
Perform One-Time Direct Upload
Along with scheduled feed fetches, you can manually perform one-time uploads.
Example
— Feed files hosted on a public location
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X POST \
  -F 'url="http://www.example.com/sample_feed.xml"' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{PRODUCT_FEED_ID}/uploads
POST /{PRODUCT_FEED_ID}/uploads HTTP/1.1
Host: graph.facebook.com

url=http%3A%2F%2Fwww.example.com%2Fsample_feed.xml
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->post(
    '/{PRODUCT_FEED_ID}/uploads',
    array (
      'url' => 'http://www.example.com/sample_feed.xml',
    ),
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{PRODUCT_FEED_ID}/uploads",
    "POST",
    {
        "url": "http:\/\/www.example.com\/sample_feed.xml"
    },
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Example
— Uploading feed files directly from the local machine. The path to the file needs to be changed according to your use case.
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X POST \
  -F 'file=@catalog.csv;type=text/csv' \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{PRODUCT_FEED_ID}/uploads
POST /{PRODUCT_FEED_ID}/uploads HTTP/1.1
Host: graph.facebook.com

file=%40catalog.csv%3Btype%3Dtext%2Fcsv
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->post(
    '/{PRODUCT_FEED_ID}/uploads',
    array (
      'file' => '@catalog.csv;type=text/csv',
    ),
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{PRODUCT_FEED_ID}/uploads",
    "POST",
    {
        "file": "@catalog.csv;type=text\/csv"
    },
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Optionally, you can set
update_only
to
true
. We create new items and update existing ones, but don't delete items from the feed. You only need to provide
id
to update existing items. This reduces time to fetch and process your file.
For example, to update only price and custom labels for 100 items in a feed, use direct upload. Provide a file with only
id
,
price
and
custom_label_0
for those items and
update_only
set to
true
. We support all listed file formats; the most common ones are TSV and CSV. See
Supported Feed Formats
for more information.
If your feed file is hosted on a server with basic
HTTP
authentication, you have the option to send both
username
and
password
.
For more information, see:
Manual Product Feed Uploads, Reference
Product Feed Upload Errors, Reference
Uploading Inventory, Commerce Platform
.
Feed Format per Use Case
Feed Format
Use Case
Sample Feed
CSV
Update
price
and
availability
for a subset of items.
Download (Right-Click and Save Link As)
TSV
Reset
sale_price
and update
custom_label_0
for a subset of items
Download (Right-Click and Save Link As)
Handling Product Feed Upload Errors
Read the
Product Feed Upload Errors documentation
.
We recommend that you check catalog upload errors and warnings after each upload session. You can achieve this by going to the
Diagnostics
section of your
Commerce Manager
, or use the Feed API to request a sampling of errors and warnings. Start by first querying for recent upload sessions.
Request
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X GET -G \
  -d 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{PRODUCT_FEED_ID}/uploads
GET /{PRODUCT_FEED_ID}/uploads HTTP/1.1
Host: graph.facebook.com
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->get(
    '/{PRODUCT_FEED_ID}/uploads',
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{PRODUCT_FEED_ID}/uploads",
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Sample Response
{
  "data": [
    {
      "id": "{UPLOAD_SESSION_ID}}",
      "start_time": "2019-07-15T12:38:36+0000",
      "end_time": "2019-07-15T12:38:47+0000"
    }
  ]
}
Then, use the value returned in the
id
field to retrieve
a sampling
of errors and warnings.
Request
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X GET -G \
  -d 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{UPLOAD_SESSION_ID}/errors
GET /{UPLOAD_SESSION_ID}/errors HTTP/1.1
Host: graph.facebook.com
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->get(
    '/{UPLOAD_SESSION_ID}/errors',
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{UPLOAD_SESSION_ID}/errors",
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Sample Response
A
fatal
severity here means the item cannot be ingested by Meta; a
warning
severity means the recommended attributes are missing or malformed. In the case of a
warning
, we will omit the problematic field and proceed with mutating the other fields.
{
  "data": [
    {
      "id": 1510567479166488,
      "summary": "A required field is missing: price.",
      "description": "Products need to have prices to run in ads. Include a price for each product in your data feed file and upload it again. Prices must include cost and an ISO currency code (for example: 10 USD instead of $10 for American dollars).",
      "severity": "fatal",
      "samples": {
        "data": [
          {
            "row_number": 2,
            "retailer_id": "yj9bpbpub5t8t22kgbq6",
            "id": "1677559492523068"
          },
          {
            "row_number": 5,
            "retailer_id": "ujn33tvbyv2vmdpo7ecb",
            "id": "1529743440653137"
          }
        ]
      }
    },
    {
      "id": 275241589314958,
      "summary": "GTIN is incorrectly formatted",
      "description": "Check that the GTIN (Global Trade Identification Number) for each of your products is in the correct format. Accepted types include UPC, EAN, JAN, and ISBN.",
      "severity": "warning",
      "samples": {
        "data": [
          {
            "row_number": 4,
            "retailer_id": "bxwb1pho9o43uxjxikcg",
            "id": "538700559625644"
          }
        ]
      }
    }
  ]
}
Download a Full Product Feed Errors Report
Getting a sampling of errors and warnings is often sufficient to fix most Product Feed Upload issues. However, you may need the full list of errors to do deeper analysis. To download a full list of errors and warnings, you must first query the most recent upload session (see section above).
You can request the full error report to be generated for a given upload session ID.
Request
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X POST \
  -F 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{UPLOAD_SESSION_ID}/error_report
POST /{UPLOAD_SESSION_ID}/error_report HTTP/1.1
Host: graph.facebook.com
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->post(
    '/{UPLOAD_SESSION_ID}/error_report',
    array (),
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{UPLOAD_SESSION_ID}/error_report",
    "POST",
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Response
{
  "success": true
}
In case the report is not ready, repeat the last call after a few seconds. You can then download the report itself.
Request
cURL
HTTP
PHP SDK
JavaScript SDK
Graph API Explorer
curl -X GET -G \
  -d 'fields="error_report"' \
  -d 'access_token=<ACCESS_TOKEN>' \
  https://graph.facebook.com/{UPLOAD_SESSION_ID}
GET /{UPLOAD_SESSION_ID}?fields=error_report HTTP/1.1
Host: graph.facebook.com
/* PHP SDK v5.0.0 */
/* make the API call */
try {
  // Returns a `Facebook\FacebookResponse` object
  $response = $fb->get(
    '/{UPLOAD_SESSION_ID}?fields=error_report',
    '{access-token}'
  );
} catch(Facebook\Exceptions\FacebookResponseException $e) {
  echo 'Graph returned an error: ' . $e->getMessage();
  exit;
} catch(Facebook\Exceptions\FacebookSDKException $e) {
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
  exit;
}
$graphNode = $response->getGraphNode();
/* handle the result */
/* make the API call */
FB.api(
    "/{UPLOAD_SESSION_ID}",
    {
        "fields": "error_report"
    },
    function (response) {
      if (response && !response.error) {
        /* handle the result */
      }
    }
);
Response
{
  "error_report": {
    "report_status": "WRITE_FINISHED",
    "file_handle": "{link-to-the-file-location}"
  },
  "id": "493476498092860"
}
You should find a URL that you can download (e.g with wget, curl, etc.). The downloaded file will contain the full error report.
If you get the error: "Cannot access an object not managed by the business owning this app", please make sure that the app you're using belongs to the business (Business Settings > Account > Apps).

Content from https://developers.facebook.com/docs/marketing-api/catalog/guides:
Catalog
Overview
Get Started
Guides
Reference
Catalog Batch API
Best Practices
Support
Guides
Use these guides to help you perform common actions with your catalog setup.
Product Categories
Learn more about the catalog fields that describe the type or category of commerce products in your listing.
Product Variants
Learn more about product variants and how to use them in your product catalog.
Inventory
Learn how to manage your catalog inventory.
Feed API
Learn how to upload inventory, handle feed upload errors, and download a product feed errors report.
Product Deep Links
Learn more how to use deep link information in your feed.
Scheduled Feeds
Learn now to schedule data feed uploads and fetches.
Microdata Tags
Learn how to use OpenGraph, Schema.org, and JSON-LD for Schema.org protocols to set microdata tags in your catalog feed file.
Metadata Tags
Learn how to set metadata tags in your product feed files.
Localized Catalogs
Learn how to set up your catalog for localized shopping with multiple languages and countries. See also
Localized Catalog Setup
,
Localized Catalog for Advantage+ Catalog Ads
and
Localized Catalog for Instagram Shopping
.

